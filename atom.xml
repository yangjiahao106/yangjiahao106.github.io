<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨家浩</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-04T15:28:51.286Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yangjiahao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql-batch-update.md</title>
    <link href="http://yoursite.com/2019/11/01/mysql-batch-update-md/"/>
    <id>http://yoursite.com/2019/11/01/mysql-batch-update-md/</id>
    <published>2019-11-01T15:18:17.000Z</published>
    <updated>2019-11-04T15:28:51.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-批量update"><a href="#mysql-批量update" class="headerlink" title="mysql 批量update"></a>mysql 批量update</h1><p>创建初始数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`fruit`</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span>,</span><br><span class="line">    fruit_name <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入初始数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="string">`fruit`</span> (<span class="string">`id`</span>, <span class="string">`fruit_name`</span>)</span><br><span class="line">    <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>,<span class="string">'apple'</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">'orange'</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">'peach'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="方法一：-使用on-duplicate-key-update-推荐"><a href="#方法一：-使用on-duplicate-key-update-推荐" class="headerlink" title="方法一： 使用on duplicate key update ==推荐=="></a>方法一： 使用on duplicate key update ==推荐==</h2><p>注意 1:插入的值中必须含有一列有唯一索引的列，比如id<br>2：其他的列必须有默认值</p><p>当主键或唯一索引重复时更新数据，否则插入新数据，不需要维护索引，效率很高更新一张十几万条数据的表只需几秒到十几秒。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="string">`fruit`</span> (<span class="string">`id`</span>, <span class="string">`fruit_name`</span>)</span><br><span class="line">    <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>, <span class="string">'grape'</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">'banana'</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">'strawbe'</span>)</span><br><span class="line">    <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="string">`fruit_name`</span> = <span class="keyword">VALUES</span>(<span class="string">`fruit_name`</span>);</span><br></pre></td></tr></table></figure></p><h2 id="方法二-case-when"><a href="#方法二-case-when" class="headerlink" title="方法二 case when"></a>方法二 case when</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> fruit</span><br><span class="line"><span class="keyword">SET</span> fruit_name = (<span class="keyword">CASE</span> <span class="keyword">id</span> <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'grape'</span></span><br><span class="line">                 <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'banana'</span></span><br><span class="line">                 <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">'strawberry'</span></span><br><span class="line">         <span class="keyword">END</span>)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">IN</span>(<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h2 id="方法三-创建临时表"><a href="#方法三-创建临时表" class="headerlink" title="方法三 创建临时表"></a>方法三 创建临时表</h2><p>创建临时表，联结临时表和需要更新的表，更新之后删除临时表<br>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 示例：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> table1, table2 <span class="keyword">set</span> table1.fruit_name = table2.fruit_name <span class="keyword">where</span> table1.id = table2.id;</span><br></pre></td></tr></table></figure></p><h1 id="方法四：replace-into"><a href="#方法四：replace-into" class="headerlink" title="方法四：replace into"></a>方法四：replace into</h1><p>当主键或唯一索引重复时删除旧的数据并插入新的数据，需要维护索引效率较慢</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">replace</span> <span class="keyword">into</span> fruit (<span class="keyword">id</span>,fruit_name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'grape'</span>),(<span class="number">2</span>,<span class="string">'banana'</span>),(<span class="number">3</span>,<span class="string">'strawberry'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql-批量update&quot;&gt;&lt;a href=&quot;#mysql-批量update&quot; class=&quot;headerlink&quot; title=&quot;mysql 批量update&quot;&gt;&lt;/a&gt;mysql 批量update&lt;/h1&gt;&lt;p&gt;创建初始数据&lt;br&gt;&lt;figure clas
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ssh代理</title>
    <link href="http://yoursite.com/2019/09/22/ssh%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2019/09/22/ssh代理/</id>
    <published>2019-09-22T15:24:48.000Z</published>
    <updated>2019-11-04T15:26:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH代理的用法"><a href="#SSH代理的用法" class="headerlink" title="SSH代理的用法"></a>SSH代理的用法</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>例1：本地portA 转发到远程机HostB的portB端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -N -L 0.0.0.0:PortA:HostB:PortB user@HostB</span></span><br></pre></td></tr></table></figure><p>例2：HostA 上启动一个 PortA 端口，通过 HostB 转发到 HostC:PortC上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HostA$ ssh -L 0.0.0.0:PortA:HostC:PortC  user@HostB</span><br></pre></td></tr></table></figure></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>例1：HostB主机的PostB转发到本地PortA<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ssh -N -R HostB:PortB:0.0.0.0:PortA user@HostB</span><br><span class="line">```       </span><br><span class="line"></span><br><span class="line">例2：HostA 将自己可以访问的 HostB:PortB 暴露给外网服务器 HostC:PortC，在 HostA 上运行：</span><br></pre></td></tr></table></figure></p><p>HostA$ ssh -R HostC:PortC:HostB:PortB  user@HostC<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## sock 代理</span><br><span class="line"></span><br><span class="line">在 HostA 的本地 1080 端口启动一个 socks5 服务，通过本地 socks5 代理的数据会通过 ssh 链接先发送给 HostB，再从 HostB 转发送给远程主机：</span><br><span class="line">```bash</span><br><span class="line">ssh -N -D 0.0.0.0:1080 user@HostB</span><br></pre></td></tr></table></figure></p><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-C 为压缩数据</span><br><span class="line">-q 安静模式</span><br><span class="line">-T 禁止远程分配终端-n 关闭标准输入</span><br><span class="line">-N 不执行远程命令</span><br><span class="line">-f 参数，把 ssh 放到后台运行。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSH代理的用法&quot;&gt;&lt;a href=&quot;#SSH代理的用法&quot; class=&quot;headerlink&quot; title=&quot;SSH代理的用法&quot;&gt;&lt;/a&gt;SSH代理的用法&lt;/h1&gt;&lt;h2 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mysql查询英文如何严格区分大小写</title>
    <link href="http://yoursite.com/2019/08/18/Mysql%E6%9F%A5%E8%AF%A2%E8%8B%B1%E6%96%87%E5%A6%82%E4%BD%95%E4%B8%A5%E6%A0%BC%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
    <id>http://yoursite.com/2019/08/18/Mysql查询英文如何严格区分大小写/</id>
    <published>2019-08-18T15:24:30.000Z</published>
    <updated>2019-11-04T15:26:19.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql查询英文如何严格区分大小写？"><a href="#Mysql查询英文如何严格区分大小写？" class="headerlink" title="Mysql查询英文如何严格区分大小写？"></a>Mysql查询英文如何严格区分大小写？</h1><p>MySQL 在查询英文时默认是不区分大小写的，比如下面这两个SQL的效果是一模一样的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">class</span> <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'TOM'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">class</span> <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'tom'</span>;</span><br></pre></td></tr></table></figure><p>如果想要严格区分大小写改怎么做呢？</p><h2 id="方法一：-修改collate"><a href="#方法一：-修改collate" class="headerlink" title="方法一： 修改collate"></a>方法一： 修改collate</h2><p>collate是指字符检索策略，可以参考这篇博客： <a href="https://juejin.im/post/5bfe5cc36fb9a04a082161c2" target="_blank" rel="noopener">https://juejin.im/post/5bfe5cc36fb9a04a082161c2</a> </p><p>Mysql默认的字符检索策略：utf8mb4_general_ci，ci是case insensitive的缩写表示不区分大小写，utf8mb4_bin表示二进制比较可以区分大小写。</p><h3 id="创建数据库时指定collate"><a href="#创建数据库时指定collate" class="headerlink" title="创建数据库时指定collate"></a>创建数据库时指定collate</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> &lt;db_name&gt; <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br></pre></td></tr></table></figure><p>更新库的collate</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> &lt;database_name&gt; <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br></pre></td></tr></table></figure><h3 id="在创建表的时候指定collate-为utf8-bin"><a href="#在创建表的时候指定collate-为utf8-bin" class="headerlink" title="在创建表的时候指定collate 为utf8_bin"></a>在创建表的时候指定collate 为utf8_bin</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">class</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">COLLATE</span> =utf8mb4_bin;</span><br></pre></td></tr></table></figure><p>更新表的collate<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;table_name&gt; <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br></pre></td></tr></table></figure></p><h3 id="也可以创建表的时候设置列级别的collate，指定单个列的collate"><a href="#也可以创建表的时候设置列级别的collate，指定单个列的collate" class="headerlink" title="也可以创建表的时候设置列级别的collate，指定单个列的collate"></a>也可以创建表的时候设置列级别的collate，指定单个列的collate</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">class</span>(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="keyword">name</span> VVARCHAR（<span class="number">64</span>） <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span>;</span><br></pre></td></tr></table></figure><p>更新列的collate</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;table_name&gt; <span class="keyword">MODIFY</span> &lt;column_name&gt; <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br></pre></td></tr></table></figure><h2 id="方法二：-修改sql"><a href="#方法二：-修改sql" class="headerlink" title="方法二： 修改sql"></a>方法二： 修改sql</h2><p>在写SQL的时候加上关键字BINARY进行二进制比较比如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">class</span> <span class="keyword">WHERE</span> <span class="built_in">BINARY</span> <span class="keyword">name</span>=<span class="string">'TOM'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">class</span> <span class="keyword">WHERE</span> <span class="built_in">BINARY</span> <span class="keyword">name</span>=<span class="string">'tom'</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mysql查询英文如何严格区分大小写？&quot;&gt;&lt;a href=&quot;#Mysql查询英文如何严格区分大小写？&quot; class=&quot;headerlink&quot; title=&quot;Mysql查询英文如何严格区分大小写？&quot;&gt;&lt;/a&gt;Mysql查询英文如何严格区分大小写？&lt;/h1&gt;&lt;p&gt;My
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git revert merge</title>
    <link href="http://yoursite.com/2019/06/29/git-revert-merge/"/>
    <id>http://yoursite.com/2019/06/29/git-revert-merge/</id>
    <published>2019-06-29T12:22:49.000Z</published>
    <updated>2019-06-29T12:23:46.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-revert-merge"><a href="#git-revert-merge" class="headerlink" title="git revert merge"></a>git revert merge</h1><p>合并代码的时候出了一些问题，想要将这次合并revert调， 结果出错了</p><pre><code>error: commit 9002453bd778790d03022d00b271f71fdb146b76 is a merge but no -m option was given.fatal: revert failed</code></pre><p>-m 是什么鬼，查看一下帮助文档</p><pre><code>-m parent-number, --mainline parent-number       Usually you cannot revert a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and      allows revert to reverse the change relative to the specified parent.      Reverting a merge commit declares that you will never want the tree changes brought in by the merge. As a result, later merges will only bring in tree changes introduced by commits that are not      ancestors of the previously reverted merge. This may or may not be what you want.      See the revert-a-faulty-merge How-To[1] for more details.</code></pre><p>原因是一次merge提交会有两个parent,我们需要指定一个parent作为主线,那么如何指定一条主线呢？如果你在A分支上合并B分支到A分支，那么1 就代表A分支，2 就代表B分支。在分支A上执行 git revert <commitid> -m 1 就将从B分支上和并过来的提交给删除了。</commitid></p><p>或者通过git log 查看一下，Merge后面第一个commit ID就是1，第二个commit ID就是2</p><pre><code>commit 9002453bd778790d03022d00b271f71fdb146b76 (HEAD -&gt; master)Merge: 7df7c3c 4b6f9c2Author: yangjh &lt;yangjh@ibaodashi.com&gt;Date:   Sat Jun 15 16:21:00 2019 +0800</code></pre><p>现在根据需求我只需要 git revert 900245 -m 1  就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git-revert-merge&quot;&gt;&lt;a href=&quot;#git-revert-merge&quot; class=&quot;headerlink&quot; title=&quot;git revert merge&quot;&gt;&lt;/a&gt;git revert merge&lt;/h1&gt;&lt;p&gt;合并代码的时候出了一些问题，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jetBrains IDE正则搜索替换高级用法</title>
    <link href="http://yoursite.com/2019/06/29/jetBrains-IDE%E6%AD%A3%E5%88%99%E6%90%9C%E7%B4%A2%E6%9B%BF%E6%8D%A2%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2019/06/29/jetBrains-IDE正则搜索替换高级用法/</id>
    <published>2019-06-29T12:20:01.000Z</published>
    <updated>2019-06-29T12:23:50.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jetBrains-IED关于正则搜索替换的高级用法。"><a href="#jetBrains-IED关于正则搜索替换的高级用法。" class="headerlink" title="jetBrains IED关于正则搜索替换的高级用法。"></a>jetBrains IED关于正则搜索替换的高级用法。</h1><h2 id="使用正则表达式捕获分组和反向引用分组。"><a href="#使用正则表达式捕获分组和反向引用分组。" class="headerlink" title="使用正则表达式捕获分组和反向引用分组。"></a>使用正则表达式捕获分组和反向引用分组。</h2><p>当我们使用正则表达式去替换一些东西时，我们还想使用正则匹配到的一些内容中，就可以使用分组然后在替换结果中引用它。</p><h3 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h3><p>替换前：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">new</span> <span class="attr">product</span>=<span class="string">"ij"</span> <span class="attr">category</span>=<span class="string">"105"</span> <span class="attr">title</span>=<span class="string">"Multiline search and replace in the current file"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">new</span> <span class="attr">product</span>=<span class="string">"ij"</span> <span class="attr">category</span>=<span class="string">"105"</span> <span class="attr">title</span>=<span class="string">"Improved search and replace in the current file"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">new</span> <span class="attr">product</span>=<span class="string">"ij"</span> <span class="attr">category</span>=<span class="string">"105"</span> <span class="attr">title</span>=<span class="string">"Regexp shows replacement preview"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>替换后：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;new product=&quot;ij&quot; category=&quot;105&quot;/&gt;&lt;title&gt;Multiline search and replace in the current file&lt;/title&gt;</span><br><span class="line">&lt;new product=&quot;ij&quot; category=&quot;105&quot;/&gt;&lt;title&gt;Improved search and replace in the current file&lt;/title&gt;</span><br><span class="line">&lt;new product=&quot;ij&quot; category=&quot;105&quot;/&gt;&lt;title&gt;Regexp shows replacement preview&lt;/title&gt;</span><br></pre></td></tr></table></figure></p><h4 id="1-使用快捷键Ctrl-R调出替换工具栏，选择正则表达式模式"><a href="#1-使用快捷键Ctrl-R调出替换工具栏，选择正则表达式模式" class="headerlink" title="1.使用快捷键Ctrl + R调出替换工具栏，选择正则表达式模式"></a>1.使用快捷键Ctrl + R调出替换工具栏，选择正则表达式模式</h4><h4 id="2-在搜索栏内输入正则表达式："><a href="#2-在搜索栏内输入正则表达式：" class="headerlink" title="2.在搜索栏内输入正则表达式："></a>2.在搜索栏内输入正则表达式：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\stitle=&quot;(.*)?&quot;\s*(/&gt;*)</span><br></pre></td></tr></table></figure><h4 id="3-在替换栏内输入替换结果，使用-加上数字反向引用正则中匹配的分组，如何确定分组编号有一个小技巧，就是数’-‘的个数，内容在哪个’-‘内-就是第几个分组。"><a href="#3-在替换栏内输入替换结果，使用-加上数字反向引用正则中匹配的分组，如何确定分组编号有一个小技巧，就是数’-‘的个数，内容在哪个’-‘内-就是第几个分组。" class="headerlink" title="3. 在替换栏内输入替换结果，使用$加上数字反向引用正则中匹配的分组，如何确定分组编号有一个小技巧，就是数’(‘的个数，内容在哪个’(‘内,就是第几个分组。"></a>3. 在替换栏内输入替换结果，使用$加上数字反向引用正则中匹配的分组，如何确定分组编号有一个小技巧，就是数’(‘的个数，内容在哪个’(‘内,就是第几个分组。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$2&lt;title&gt;$1&lt;/title&gt;</span><br></pre></td></tr></table></figure><h4 id="4-点击REPLACE-All-大功告成"><a href="#4-点击REPLACE-All-大功告成" class="headerlink" title="4. 点击REPLACE All 大功告成"></a>4. 点击REPLACE All 大功告成</h4><h2 id="转换字符大小写"><a href="#转换字符大小写" class="headerlink" title="转换字符大小写"></a>转换字符大小写</h2><pre><code>语法也很简单，一共有四种：\l changes a character to lowercase until the next character in the string. For example, Bar becomes bar.\u changes a character to uppercase until the next character in the string. For example, bar becomes Bar.\L changes characters to lowercase until the end of the literal string (\E). For example, BAR becomes bar.\U changes characters to uppercase until the end of the literal string (\E). For example, bar becomes BAR.翻译过来就是：\l 首字母变小型，例如 Bar -&gt; bar\u 首字母变大小，例如 bar -&gt; Bar\L 字符串变小写，例如 BAR -&gt; bar\U 字符串变大写，例如 bar -&gt; BAR</code></pre><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下划线格式，变小驼峰格式</p><p>搜索栏：</p><pre><code>_([a-z]+)</code></pre><p>替换栏：</p><pre><code>\u$1</code></pre><h4 id="推荐一个jetbrains插件CamelCase-安装后使用快捷键SHIFT-ALT-U-可以切换CamelCase-camelCase-snake-case-SNAKE-CASE-四种风格。"><a href="#推荐一个jetbrains插件CamelCase-安装后使用快捷键SHIFT-ALT-U-可以切换CamelCase-camelCase-snake-case-SNAKE-CASE-四种风格。" class="headerlink" title="推荐一个jetbrains插件CamelCase, 安装后使用快捷键SHIFT + ALT + U 可以切换CamelCase, camelCase, snake_case, SNAKE_CASE 四种风格。"></a>推荐一个jetbrains插件CamelCase, 安装后使用快捷键SHIFT + ALT + U 可以切换CamelCase, camelCase, snake_case, SNAKE_CASE 四种风格。</h4><h2 id="多行搜索"><a href="#多行搜索" class="headerlink" title="多行搜索"></a>多行搜索</h2><p>最近查找BUG时搜索代码用到了多行搜索，顺便做个笔记。</p><h3 id="还是举个栗子"><a href="#还是举个栗子" class="headerlink" title="还是举个栗子"></a>还是举个栗子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package awesomeProject</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">update := map[string]interface&#123;&#125;&#123;</span><br><span class="line">&quot;hello&quot;:&quot;world&quot;,</span><br><span class="line">&quot;name&quot;: &quot;tom&quot;,</span><br><span class="line">&quot;holy&quot;:&quot;shit&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update = map[string]interface&#123;&#125;&#123;</span><br><span class="line">&quot;hello&quot;:&quot;world&quot;,</span><br><span class="line">&quot;holy&quot;:&quot;shit&quot;,</span><br><span class="line">&#125;</span><br><span class="line">update[&quot;name&quot;] = &quot;marry&quot;</span><br><span class="line">fmt.Println(update)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如代码中定义了许多的名为updage的map现在要搜索update中有添加键为name的代码，正则表达式可以这样写</p><pre><code>(update.*=.*\{[^}]*?name[^}]*?\})|(update\[&quot;name&quot;])</code></pre><p>要搜索出第一个update就需要使用多行搜索。[^}] 可以匹配除了 } 的所有字符，包括空格换行制表等等，然后使用} 进行结束匹配，避免匹配过多内容。搜索第二个update就简单多了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jetBrains-IED关于正则搜索替换的高级用法。&quot;&gt;&lt;a href=&quot;#jetBrains-IED关于正则搜索替换的高级用法。&quot; class=&quot;headerlink&quot; title=&quot;jetBrains IED关于正则搜索替换的高级用法。&quot;&gt;&lt;/a&gt;jetBr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>golang等待其他goroutine结束</title>
    <link href="http://yoursite.com/2019/06/02/golang%E7%AD%89%E5%BE%85%E5%85%B6%E4%BB%96goroutine%E7%BB%93%E6%9D%9F/"/>
    <id>http://yoursite.com/2019/06/02/golang等待其他goroutine结束/</id>
    <published>2019-06-02T15:52:12.000Z</published>
    <updated>2019-06-02T15:53:03.422Z</updated>
    
    <content type="html"><![CDATA[<p>golang中当main函数结束后，整个程序就退出了，不会等待其他的携程执行完毕，那么如何等待所有的goroutine结束？下面介绍两种方法。 </p><h3 id="1-使用cnannel实现"><a href="#1-使用cnannel实现" class="headerlink" title="1.使用cnannel实现"></a>1.使用cnannel实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">urls := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"http://www.reddit.com/r/aww.json"</span>,</span><br><span class="line"><span class="string">"http://www.reddit.com/r/funny.json"</span>,</span><br><span class="line"><span class="string">"http://www.reddit.com/r/programming.json"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, url := <span class="keyword">range</span> urls &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">done &lt;- <span class="literal">true</span></span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(url)</span><br><span class="line">res, err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line">&#125;(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i:= <span class="number">0</span> ; i&lt; <span class="built_in">len</span>(urls); i++&#123;</span><br><span class="line">&lt;-done</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用sync包的-WaitGroup"><a href="#2-使用sync包的-WaitGroup" class="headerlink" title="2.使用sync包的 WaitGroup"></a>2.使用sync包的 WaitGroup</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">urls := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"http://www.reddit.com/r/aww.json"</span>,</span><br><span class="line"><span class="string">"http://www.reddit.com/r/funny.json"</span>,</span><br><span class="line"><span class="string">"http://www.reddit.com/r/programming.json"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="built_in">len</span>(urls))</span><br><span class="line"><span class="keyword">for</span> _, url := <span class="keyword">range</span> urls &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">res, err := http.Get(url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">body, err := ioutil.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line">&#125;(url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;golang中当main函数结束后，整个程序就退出了，不会等待其他的携程执行完毕，那么如何等待所有的goroutine结束？下面介绍两种方法。 &lt;/p&gt;
&lt;h3 id=&quot;1-使用cnannel实现&quot;&gt;&lt;a href=&quot;#1-使用cnannel实现&quot; class=&quot;heade
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>golang 匿名函数中使用外部变量</title>
    <link href="http://yoursite.com/2019/06/02/golang-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2019/06/02/golang-匿名函数中使用外部变量/</id>
    <published>2019-06-02T15:41:19.000Z</published>
    <updated>2019-06-02T15:42:30.141Z</updated>
    
    <content type="html"><![CDATA[<p>defer 的匿名函数中引用了外部变量a，a 的值在for循环结束最后会被设为”mouse”, 所以defer中的输出都为”mouse”</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">animals := []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"mouse"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> animals&#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// mouse</span></span><br></pre></td></tr></table></figure><p>// 下面的goroutine 同样引用了外部变量a，由于下面的三个goroutine是异步的，所以输出是不缺定的，次例的输出都为mouse。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">animals := []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"mouse"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> animals &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// mouse</span></span><br></pre></td></tr></table></figure><p>如果我们想要分别输出 “dog”, “cat”,”mouse” 改怎么写呢？</p><p>通过参数的传递做一次值拷贝就可以了，注意要传递值不要传递指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fumc main()&#123;</span><br><span class="line">animals := []<span class="keyword">string</span>&#123;<span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"mouse"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> animals &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// dog</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// cat</span></span><br></pre></td></tr></table></figure><p>下面再举两个个例子，第一段代码匿名函数中的err使用的外部变量，第二段代码匿名函数中的err是内部定义的变量。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line">_ = err</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err = fmt.Println(<span class="string">"hello goroutine"</span>)</span><br><span class="line">time.Sleep(time.Second*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"err is not nil"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"err is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Second )</span><br><span class="line">err = errors.New(<span class="string">"error"</span>)</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// err is not nil</span></span><br></pre></td></tr></table></figure></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := fmt.Println(<span class="string">"hello world"</span>)</span><br><span class="line">_ = err</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := strconv.Atoi(<span class="string">"22"</span>)</span><br><span class="line">time.Sleep(time.Second*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"err is not nil"</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"err is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Second )</span><br><span class="line">err = errors.New(<span class="string">"error"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// err is nil</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;defer 的匿名函数中引用了外部变量a，a 的值在for循环结束最后会被设为”mouse”, 所以defer中的输出都为”mouse”&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql 死锁</title>
    <link href="http://yoursite.com/2019/05/13/mysql%20%E6%AD%BB%E9%94%81/"/>
    <id>http://yoursite.com/2019/05/13/mysql 死锁/</id>
    <published>2019-05-13T08:58:40.000Z</published>
    <updated>2019-05-13T13:55:57.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql死锁"><a href="#mysql死锁" class="headerlink" title="mysql死锁"></a>mysql死锁</h1><p>今天的代码中一不小心引入了一个死锁，找了好久才找到问题。我在一个接口中开启了一个事务，并做了一些更新，由于在接口中又调用了另一个接口，接口中更新了同一条数据，就产生了死锁。</p><h1 id="死锁产生的几种情况："><a href="#死锁产生的几种情况：" class="headerlink" title="死锁产生的几种情况："></a>死锁产生的几种情况：</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql死锁&quot;&gt;&lt;a href=&quot;#mysql死锁&quot; class=&quot;headerlink&quot; title=&quot;mysql死锁&quot;&gt;&lt;/a&gt;mysql死锁&lt;/h1&gt;&lt;p&gt;今天的代码中一不小心引入了一个死锁，找了好久才找到问题。我在一个接口中开启了一个事务，并做了一些更新
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql中for update</title>
    <link href="http://yoursite.com/2019/04/15/mysql-for-update/"/>
    <id>http://yoursite.com/2019/04/15/mysql-for-update/</id>
    <published>2019-04-15T14:32:24.000Z</published>
    <updated>2019-04-27T14:25:46.675Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql中for-update"><a href="#mysql中for-update" class="headerlink" title="mysql中for update"></a>mysql中for update</h1><h2 id="创建一些数据"><a href="#创建一些数据" class="headerlink" title="创建一些数据"></a>创建一些数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span> (<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>),<span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>),<span class="string">`balance`</span>,<span class="built_in">BIGINT</span>(<span class="number">20</span>)) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span>(<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`balance`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'user1'</span>,<span class="number">100</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'user2'</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'user3'</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>假设我没需要查询用户的余额，进行结算后更新余额。</p><h3 id="连接一"><a href="#连接一" class="headerlink" title="连接一"></a>连接一</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> =  <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">set</span> <span class="string">`balance`</span> = <span class="number">200</span> <span class="keyword">where</span> <span class="string">`id`</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="连接二"><a href="#连接二" class="headerlink" title="连接二"></a>连接二</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> =  <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">set</span> <span class="string">`balance`</span> = <span class="number">50</span> <span class="keyword">where</span> <span class="string">`id`</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h3 id="连接三"><a href="#连接三" class="headerlink" title="连接三"></a>连接三</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> =  <span class="number">2</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">set</span> <span class="string">`balance`</span> = <span class="number">100</span> <span class="keyword">where</span> <span class="string">`id`</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>我们建立了三个事务，连接一执行后事务不提交，执行连接二会阻塞在SELECT，直到连接一的事务提交，连接三可以顺利执行。连接一SELECT使用了FOR UPDATE会在查询到的结果上加上排它锁(exclusive locks),由于连接二SELECT 也使用了 FOR UPDATE在尝试加锁的时候就会阻塞。InnodDB引擎下 UPDATE DELETE INSERT 操作都会默认添加排它锁。</p><p>这里的排它锁是行级锁，不会影响表中其他数据的操作，所以连接三可以顺利执行，不会阻塞。</p><h2 id="使用数据库进行计算"><a href="#使用数据库进行计算" class="headerlink" title="使用数据库进行计算"></a>使用数据库进行计算</h2><p>对于一些简单的计算和更新可以放到数据库中，InnoDB UPDATE 操作默认使用排他锁，所以是并发安全的<br>例如：</p><h3 id="连接-一"><a href="#连接-一" class="headerlink" title="连接 一"></a>连接 一</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> =  <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">set</span> <span class="string">`balance`</span> = <span class="string">`balance`</span> + <span class="number">100</span> <span class="keyword">where</span> <span class="string">`id`</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="连接-二"><a href="#连接-二" class="headerlink" title="连接 二"></a>连接 二</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">account</span> <span class="keyword">WHERE</span> <span class="string">`id`</span> =  <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">account</span> <span class="keyword">set</span> <span class="string">`balance`</span> = <span class="string">`balance`</span> - <span class="number">50</span> <span class="keyword">where</span> <span class="string">`id`</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><h3 id="共享锁和排他锁"><a href="#共享锁和排他锁" class="headerlink" title="共享锁和排他锁"></a>共享锁和排他锁</h3><h4 id="1-共享锁-S锁-：-SELECT-…-FOR-SHARE"><a href="#1-共享锁-S锁-：-SELECT-…-FOR-SHARE" class="headerlink" title="1.共享锁(S锁)： SELECT … FOR SHARE"></a>1.共享锁(S锁)： SELECT … FOR SHARE</h4><p>1.使用S后，其他的事务可以读取数据，但是在你的事务提交前其他事务是不可以修改数据的。2.如果你查询这些数据中有在其他的事务中被修改，并且事务还没有提交，你的查询也会被阻塞，直到其他的事务提交。</p><h4 id="2-排他锁-X锁-SELECT-…-FOR-UPDATE；"><a href="#2-排他锁-X锁-SELECT-…-FOR-UPDATE；" class="headerlink" title="2.排他锁(X锁): SELECT … FOR UPDATE；"></a>2.排他锁(X锁): SELECT … FOR UPDATE；</h4><p>对数据行添加X锁后其他的线程再添加X锁就会阻塞。</p><h4 id="简单概括"><a href="#简单概括" class="headerlink" title="简单概括"></a>简单概括</h4><p>添加S锁后 其他事务可以添加S锁但不能添加X锁<br>添加X锁后 其他事务即不能添加S锁也不能添加S锁</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql中for-update&quot;&gt;&lt;a href=&quot;#mysql中for-update&quot; class=&quot;headerlink&quot; title=&quot;mysql中for update&quot;&gt;&lt;/a&gt;mysql中for update&lt;/h1&gt;&lt;h2 id=&quot;创建一些数据&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019 第一次面试</title>
    <link href="http://yoursite.com/2019/02/27/2019-%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%9D%A2%E8%AF%95/"/>
    <id>http://yoursite.com/2019/02/27/2019-第一次面试/</id>
    <published>2019-02-27T08:58:40.000Z</published>
    <updated>2019-02-27T14:12:08.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2019-第一场面试"><a href="#2019-第一场面试" class="headerlink" title="2019 第一场面试"></a>2019 第一场面试</h1><h2 id="1-格式化当前时间"><a href="#1-格式化当前时间" class="headerlink" title="1.格式化当前时间"></a>1.格式化当前时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br></pre></td></tr></table></figure><h2 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2.单例模式"></a>2.单例模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：类属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">"_instance"</span>):</span><br><span class="line">            cls._instance = super(Singleton, cls).__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：共享属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    _state = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        obj = super(Singleton, cls).__new__(cls)</span><br><span class="line">        obj.__dict__ = cls._state</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    instance = &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> instance:</span><br><span class="line">            instance[cls] = cls(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> instance[cls]</span><br><span class="line">    <span class="keyword">return</span> function</span><br><span class="line"></span><br><span class="line"><span class="meta">@singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br></pre></td></tr></table></figure><h2 id="3-整形和字符串类型转换"><a href="#3-整形和字符串类型转换" class="headerlink" title="3.整形和字符串类型转换"></a>3.整形和字符串类型转换</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = int(<span class="string">"1"</span>)</span><br><span class="line">s = str(<span class="number">12</span>)</span><br></pre></td></tr></table></figure><h2 id="4-使用匿名函数反转字符串"><a href="#4-使用匿名函数反转字符串" class="headerlink" title="4.使用匿名函数反转字符串"></a>4.使用匿名函数反转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">string = <span class="string">"abcd"</span></span><br><span class="line">reverse = <span class="keyword">lambda</span> s : s[::<span class="number">-1</span>]</span><br><span class="line">string = reverse(string)</span><br><span class="line">reverse2 = <span class="keyword">lambda</span> s: <span class="string">""</span>.join(reversed(s))</span><br></pre></td></tr></table></figure><h2 id="5-介绍面向对象"><a href="#5-介绍面向对象" class="headerlink" title="5.介绍面向对象"></a>5.介绍面向对象</h2><ol><li>面向对象的三个特点：封装， 继承，多态<br>1.1 封装： 吧客观事物封装成抽象的类<br>1.2 继承： 可以使用现有的类的所有功能，而不需要重新实现，并且可以对这些功能进行扩展。python 新式采用<strong>广度优先搜索</strong> 旧式类使用深度优先搜索。<br>1.3 多态：基于对象所属类的不同，外部对同一个方法的调用，实际执行的逻辑不同。实现多态，有二种方式，覆盖，重载。覆盖，是指子类重新定义父类的虚函数的做法。重载，是指允许存在多个同名函数，而这些函数的参数表不同。</li></ol><h2 id="6-python-获取路径下的文件目录"><a href="#6-python-获取路径下的文件目录" class="headerlink" title="6.python 获取路径下的文件目录"></a>6.python 获取路径下的文件目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">"\\"</span>)</span><br><span class="line">os.listdir()</span><br></pre></td></tr></table></figure><h2 id="7-如何发起HTTP请求"><a href="#7-如何发起HTTP请求" class="headerlink" title="7.如何发起HTTP请求"></a>7.如何发起HTTP请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qeruests</span><br><span class="line">url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">params = &#123;&#125;</span><br><span class="line">contens = requests.get(url, params = params)</span><br></pre></td></tr></table></figure><h2 id="8-python-实现常量"><a href="#8-python-实现常量" class="headerlink" title="8. python 实现常量"></a>8. python 实现常量</h2><p><a href="http://www.malike.net.cn/blog/2013/11/03/python-constants/" target="_blank" rel="noopener">http://www.malike.net.cn/blog/2013/11/03/python-constants/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_const</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ConstError</span><span class="params">(TypeError)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.__dict__.has_key(name):</span><br><span class="line">            <span class="keyword">raise</span> self.ConstError, <span class="string">"Can't rebind const instance attribute (%s)"</span> % name</span><br><span class="line">        self.__dict__[name] = value</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[__name__] = _const()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> const</span><br><span class="line">const.magic = <span class="number">23</span></span><br></pre></td></tr></table></figure><h2 id="9-想不起来了。。。"><a href="#9-想不起来了。。。" class="headerlink" title="9.想不起来了。。。"></a>9.想不起来了。。。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2019-第一场面试&quot;&gt;&lt;a href=&quot;#2019-第一场面试&quot; class=&quot;headerlink&quot; title=&quot;2019 第一场面试&quot;&gt;&lt;/a&gt;2019 第一场面试&lt;/h1&gt;&lt;h2 id=&quot;1-格式化当前时间&quot;&gt;&lt;a href=&quot;#1-格式化当前时间&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 115 Distinct Subsequences</title>
    <link href="http://yoursite.com/2019/02/25/Leetcode-115-Distinct-Subsequences/"/>
    <id>http://yoursite.com/2019/02/25/Leetcode-115-Distinct-Subsequences/</id>
    <published>2019-02-25T08:05:59.000Z</published>
    <updated>2019-02-25T08:43:18.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode-115-Distinct-Subsequences"><a href="#Leetcode-115-Distinct-Subsequences" class="headerlink" title="Leetcode 115 Distinct Subsequences"></a>Leetcode 115 Distinct Subsequences</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。</p><p>一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，”ACE” 是 “ABCDE” 的一个子序列，而 “AEC” 不是）</p><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p>输入: S = “babgbag”, T = “bag”<br>输出: 5<br>解释:<br>如下图所示, 有 5 种可以从 S 中得到 “bag” 的方案。<br>(上箭头符号 ^ 表示选取的字母)<br>babgbag<br>^^ ^<br>babgbag<br>^^    ^<br>babgbag<br>^    ^^<br>babgbag<br>  ^  ^^<br>babgbag<br>    ^^^</p><h2 id="使用动态规划求解"><a href="#使用动态规划求解" class="headerlink" title="使用动态规划求解"></a>使用动态规划求解</h2><p>输入: S = “babgbag”, T = “bag”</p><table><thead><tr><th></th><th></th><th></th><th>b</th><th>a</th><th>b</th><th>g</th><th>b</th><th>a</th><th>g</th></tr></thead><tbody><tr><td></td><td>i/j</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td></td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>b</td><td>1</td><td>0</td><td><strong>1</strong></td><td>1</td><td><strong>2</strong></td><td>2</td><td><strong>3</strong></td><td>3</td><td>3</td></tr><tr><td>a</td><td>2</td><td>0</td><td>0</td><td><strong>1</strong></td><td>1</td><td>1</td><td>1</td><td><strong>4</strong></td><td>4</td></tr><tr><td>g</td><td>3</td><td>0</td><td>0</td><td>0</td><td>0</td><td><strong>1</strong></td><td>1</td><td>1</td><td><strong>5</strong></td></tr></tbody></table><p>动态规划将一个的问题分解成子的问题，然后从子问题一步步找到最优解。<br>如上图表所示，可以先求问题S=”bababag”, T = “b”,<br>再求问题S=”bababag”,T=”ba”,<br>再求S=”bababag”,T=”bag”.<br>时间复杂度为O(mn)</p><h3 id="golang实现代码"><a href="#golang实现代码" class="headerlink" title="golang实现代码"></a>golang实现代码</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">numDistinct</span><span class="params">(s <span class="keyword">string</span>, t <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">dp := <span class="built_in">make</span>([][]<span class="keyword">int</span>, <span class="built_in">len</span>(t)+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(t)+<span class="number">1</span>; i++ &#123;</span><br><span class="line">dp[i] = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(s)+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将第一行初始化为1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(s)+<span class="number">1</span>; i++ &#123;</span><br><span class="line">dp[<span class="number">0</span>][i] = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(t)+<span class="number">1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="built_in">len</span>(s)+<span class="number">1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> s[j<span class="number">-1</span>] == t[i<span class="number">-1</span>] &#123;</span><br><span class="line">dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + dp[i][j<span class="number">-1</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j] = dp[i][j<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[<span class="built_in">len</span>(t)][<span class="built_in">len</span>(s)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode-115-Distinct-Subsequences&quot;&gt;&lt;a href=&quot;#Leetcode-115-Distinct-Subsequences&quot; class=&quot;headerlink&quot; title=&quot;Leetcode 115 Distinct Su
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用快速排序解决TopK问题和数据流的中位数</title>
    <link href="http://yoursite.com/2019/01/19/%E4%BD%BF%E7%94%A8%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E8%A7%A3%E5%86%B3TopK%E9%97%AE%E9%A2%98%E5%92%8C%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2019/01/19/使用快速排序解决TopK问题和数据流的中位数/</id>
    <published>2019-01-19T13:57:31.000Z</published>
    <updated>2019-05-13T13:45:50.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用快排思想解决TopK问题和数据流的中位数"><a href="#使用快排思想解决TopK问题和数据流的中位数" class="headerlink" title="使用快排思想解决TopK问题和数据流的中位数"></a>使用快排思想解决TopK问题和数据流的中位数</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>快速排序这里就不多介绍了，Partition函数为快速排序的核心函数，负责选择一个数字将比这个数字小的数字放到左边，大的数字放到右边，最后返回这个数字的下标，下面为使用golang 实现的代码。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(nums []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start == end &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">index := Partition(nums, start, end)</span><br><span class="line"><span class="keyword">if</span> index &gt; start &#123;</span><br><span class="line">QuickSort(nums, start, index<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> index &lt; end &#123;</span><br><span class="line">QuickSort(nums, index+<span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Partition 函数用于快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Partition</span><span class="params">(nums []<span class="keyword">int</span>, start, end <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">//随机生成一个下标，此下标中的值作为中间值</span></span><br><span class="line"><span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line"><span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br><span class="line">index := rand.Intn(end-start) + start</span><br><span class="line">nums[index], nums[end] = nums[end], nums[index]</span><br><span class="line">small := start</span><br><span class="line"><span class="keyword">for</span> index = start; index &lt; end; index++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[index] &gt; nums[end] &#123;</span><br><span class="line"><span class="keyword">if</span> small != index &#123;</span><br><span class="line">nums[index], nums[small] = nums[small], nums[index]</span><br><span class="line">&#125;</span><br><span class="line">small++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//small++</span></span><br><span class="line">nums[small], nums[end] = nums[end], nums[small]</span><br><span class="line"><span class="comment">// 返回中间值的下标</span></span><br><span class="line"><span class="keyword">return</span> small</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Top-K-问题：最大的K个数字"><a href="#Top-K-问题：最大的K个数字" class="headerlink" title="Top K 问题：最大的K个数字"></a>Top K 问题：最大的K个数字</h2><p>使用快速排序的分治思想可以将这个问题的时间复杂度降低到O(n)</p><p><strong>减治法</strong> : 减治法比分治法效率更高，相比于分治法，减治法只需要解决分治之后其中一个<strong>子问题</strong>，而分治法需要解决分治后的所有子问题，所以它的时间复杂度为O(n)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TopK</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums == <span class="literal">nil</span> || <span class="built_in">len</span>(nums) ==<span class="number">0</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; </span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">end := <span class="built_in">len</span>(nums) <span class="number">-1</span></span><br><span class="line">index := Partition(nums, start, end)</span><br><span class="line"><span class="keyword">for</span> index != k<span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> index &gt; k<span class="number">-1</span> &#123;</span><br><span class="line">end = index<span class="number">-1</span></span><br><span class="line">index = Partition(nums, start, end)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">start = index + <span class="number">1</span></span><br><span class="line">index = Partition(nums, start, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums[<span class="number">0</span>:k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无序数组的中位数"><a href="#无序数组的中位数" class="headerlink" title="无序数组的中位数"></a>无序数组的中位数</h2><p>如果数组的个数为奇数则中位数为排序后位于中间的那个数字， 如果个数为偶数，则中位数为排序后中间两个数字的平均值，所以要分两种情况。</p><p>此问题同样可以使用快排的partition函数解决，时间复杂度为O(n)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMedian</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> nums == <span class="literal">nil</span> || <span class="built_in">len</span>(nums) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums)&amp;<span class="number">1</span> == <span class="number">1</span> &#123; <span class="comment">// 长度为奇数</span></span><br><span class="line">mid := <span class="built_in">len</span>(nums) / <span class="number">2</span></span><br><span class="line">index := Partition(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> index != mid &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; mid &#123;</span><br><span class="line">index = Partition(nums, index+<span class="number">1</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">index = Partition(nums, <span class="number">0</span>, index<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">float64</span>(nums[mid])</span><br><span class="line">        </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 长度为偶数</span></span><br><span class="line">midR := <span class="built_in">len</span>(nums) / <span class="number">2</span></span><br><span class="line">midL := (<span class="built_in">len</span>(nums) / <span class="number">2</span>) - <span class="number">1</span></span><br><span class="line">res := <span class="number">0</span></span><br><span class="line">findL, findR := <span class="literal">false</span>, <span class="literal">false</span></span><br><span class="line">start := <span class="number">0</span></span><br><span class="line">end := <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">index := Partition(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums)<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> !findL || !findR &#123;</span><br><span class="line"><span class="keyword">if</span> index &lt; midL &#123;</span><br><span class="line">start = index + <span class="number">1</span></span><br><span class="line">index = Partition(nums, start, end)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> index &gt; midR &#123;</span><br><span class="line">end = index - <span class="number">1</span></span><br><span class="line">index = Partition(nums, start, end)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> index == midL &#123;</span><br><span class="line">res += nums[midL]</span><br><span class="line">findL = <span class="literal">true</span></span><br><span class="line">start = index + <span class="number">1</span></span><br><span class="line">fmt.Println(start, end, midL)</span><br><span class="line">index = Partition(nums, start, end)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> index == midR &#123;</span><br><span class="line">res += nums[midR]</span><br><span class="line">findR = <span class="literal">true</span></span><br><span class="line">end = index - <span class="number">1</span></span><br><span class="line">fmt.Println(start, end)</span><br><span class="line">index = Partition(nums, start, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">float64</span>(res) / <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>def NumberOf1Between1AndN_Solution(n):<br>    ones,m =0,1<br>    while m&lt;=n:<br>        ones += (n//m+8)//10<em>m + (n//m%10==1)</em>(n%m+1)<br>        m *= 10</p><hr><p>作者：daisyyyyyyyy<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/u013129109/article/details/79765776" target="_blank" rel="noopener">https://blog.csdn.net/u013129109/article/details/79765776</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用快排思想解决TopK问题和数据流的中位数&quot;&gt;&lt;a href=&quot;#使用快排思想解决TopK问题和数据流的中位数&quot; class=&quot;headerlink&quot; title=&quot;使用快排思想解决TopK问题和数据流的中位数&quot;&gt;&lt;/a&gt;使用快排思想解决TopK问题和数据流的中
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最大堆和最小堆 golang实现</title>
    <link href="http://yoursite.com/2019/01/15/golang-%E6%9C%80%E5%A4%A7%E5%A0%86%E5%92%8C%E6%9C%80%E5%B0%8F%E5%A0%86/"/>
    <id>http://yoursite.com/2019/01/15/golang-最大堆和最小堆/</id>
    <published>2019-01-15T14:32:24.000Z</published>
    <updated>2019-01-20T07:31:25.102Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最小堆和最大堆-golang实现"><a href="#最小堆和最大堆-golang实现" class="headerlink" title="最小堆和最大堆 golang实现"></a>最小堆和最大堆 golang实现</h1><p>二叉堆是一种特殊的堆，它满足两个性质：结构性和堆序性</p><ul><li>结构性：二叉堆是一颗完全二叉树，完全二叉树可以用一个数组表示，不需要指针，所以效率更高。当用数组表示时，数组中任一位置i上的元素，其左儿子在位置2i上，右儿子在位置(2i+ 1)上，其父节点在位置(i/2)上。</li><li>堆序性质：堆的最小值或最大值在根节点上，所以可以快速找到最大值或最小值。</li></ul><p>最大堆和最小堆是二叉堆的两种形式。<br>-最大堆：根结点的键值是所有堆结点键值中最大者的堆。<br>-最小堆：根结点的键值是所有堆结点键值中最小者的堆。</p><h1 id="1-最小堆实现，不使用container-heap"><a href="#1-最小堆实现，不使用container-heap" class="headerlink" title="1. 最小堆实现，不使用container/heap"></a>1. 最小堆实现，不使用container/heap</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MinHeap <span class="keyword">struct</span> &#123;</span><br><span class="line">    Element []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义构造方法"><a href="#定义构造方法" class="headerlink" title="定义构造方法"></a>定义构造方法</h2><p>数组中第一个元素不使用，存放一个小于堆中任何数字的值用于结束循环。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MinHeap构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewMinHeap</span><span class="params">()</span> *<span class="title">MinHeap</span></span> &#123;</span><br><span class="line">    <span class="comment">// 第一个元素仅用于结束insert中的 for 循环</span></span><br><span class="line">    h := &amp;MinHeap&#123;Element: []<span class="keyword">int</span>&#123;math.MinInt64&#125;&#125;</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入元素就直接将元素增加到堆的末尾，然后进行上浮操作，使二叉堆有序。<br>如果上浮一直到根，时间复杂度为O(log N)，但这种上浮操作一般结束的要早。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入数字,插入数字需要保证堆的性质</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(H *MinHeap)</span> <span class="title">Insert</span><span class="params">(v <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    H.Element = <span class="built_in">append</span>(H.Element, v)</span><br><span class="line">    i := <span class="built_in">len</span>(H.Element) - <span class="number">1</span></span><br><span class="line">    <span class="comment">// 上浮</span></span><br><span class="line">    <span class="keyword">for</span> ; H.Element[i/<span class="number">2</span>] &gt; v; i /= <span class="number">2</span> &#123;</span><br><span class="line">        H.Element[i] = H.Element[i/<span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    H.Element[i] = v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除最小值"><a href="#删除最小值" class="headerlink" title="删除最小值"></a>删除最小值</h2><p>删除最大元素就直接从二叉堆顶端删除，然后进行下沉操作。最坏时间复杂度同样为O(log N)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除并返回最小值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(H *MinHeap)</span> <span class="title">DeleteMin</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(H.Element) &lt;= <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">"MinHeap is empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line">minElement := H.Element[<span class="number">1</span>]</span><br><span class="line">lastElement := H.Element[<span class="built_in">len</span>(H.Element)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">var</span> i, child <span class="keyword">int</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>; i*<span class="number">2</span> &lt; <span class="built_in">len</span>(H.Element); i = child &#123;</span><br><span class="line">child = i * <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> child &lt; <span class="built_in">len</span>(H.Element)<span class="number">-1</span> &amp;&amp; H.Element[child+<span class="number">1</span>] &lt; H.Element[child] &#123;</span><br><span class="line">child ++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下滤一层</span></span><br><span class="line"><span class="keyword">if</span> lastElement &gt; H.Element[child] &#123;</span><br><span class="line">H.Element[i] = H.Element[child]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">H.Element[i] = lastElement</span><br><span class="line">H.Element = H.Element[:<span class="built_in">len</span>(H.Element)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> minElement, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 堆的大小</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(H *MinHeap)</span> <span class="title">Length</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(H.Element) - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最小堆的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(H *MinHeap)</span> <span class="title">Min</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(H.Element) &gt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> H.Element[<span class="number">1</span>], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">"heap is empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MinHeap格式化输出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(H *MinHeap)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%v"</span>, H.Element[<span class="number">1</span>:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-下面介绍container-heap包-和最大堆的实现"><a href="#2-下面介绍container-heap包-和最大堆的实现" class="headerlink" title="2.下面介绍container/heap包 和最大堆的实现"></a>2.下面介绍container/heap包 和最大堆的实现</h1><h2 id="heap源码中定义了一个Interface-的接口，此接口一共包含五个方法，我们定义一个实现此接口的类就实现了一个二叉堆"><a href="#heap源码中定义了一个Interface-的接口，此接口一共包含五个方法，我们定义一个实现此接口的类就实现了一个二叉堆" class="headerlink" title="heap源码中定义了一个Interface 的接口，此接口一共包含五个方法，我们定义一个实现此接口的类就实现了一个二叉堆"></a>heap源码中定义了一个Interface 的接口，此接口一共包含五个方法，我们定义一个实现此接口的类就实现了一个二叉堆</h2><p>container/heap/heap.go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">sort.Interface</span><br><span class="line">Push(x <span class="keyword">interface</span>&#123;&#125;) <span class="comment">// add x as element Len()</span></span><br><span class="line">Pop() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// remove and return element Len() - 1.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>sort.go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">Len() <span class="keyword">int</span></span><br><span class="line"><span class="comment">// Less reports whether the element with</span></span><br><span class="line"><span class="comment">// index i should sort before the element with index j.</span></span><br><span class="line">Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line"><span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="定义一个最大堆，并实现heap-Interface-接口"><a href="#定义一个最大堆，并实现heap-Interface-接口" class="headerlink" title="定义一个最大堆，并实现heap.Interface 接口"></a>定义一个最大堆，并实现heap.Interface 接口</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MaxHeap []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h MaxHeap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h MaxHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// 由于是最大堆，所以使用大于号</span></span><br><span class="line"><span class="keyword">return</span> h[i] &gt; h[j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *MaxHeap)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">(*h)[i], (*h)[j] = (*h)[j], (*h)[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *MaxHeap)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">*h = <span class="built_in">append</span>(*h, x.(<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop 弹出最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *MaxHeap)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;&#123;</span><br><span class="line">res := (*h)[<span class="built_in">len</span>(*h)<span class="number">-1</span>]</span><br><span class="line">*h = (*h)[:<span class="built_in">len</span>(*h)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试最大堆"><a href="#测试最大堆" class="headerlink" title="测试最大堆"></a>测试最大堆</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">h := <span class="built_in">make</span>(MaxHeap, <span class="number">0</span>)</span><br><span class="line">heap.Init(&amp;h)</span><br><span class="line"></span><br><span class="line">heap.Push(&amp;h, <span class="number">8</span>)</span><br><span class="line">heap.Push(&amp;h, <span class="number">1</span>)</span><br><span class="line">heap.Push(&amp;h, <span class="number">4</span>)</span><br><span class="line">heap.Push(&amp;h, <span class="number">5</span>)</span><br><span class="line">heap.Push(&amp;h, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(heap.Pop(&amp;h))</span><br><span class="line">fmt.Println(heap.Pop(&amp;h))</span><br><span class="line">fmt.Println(heap.Pop(&amp;h))</span><br><span class="line">fmt.Println(heap.Pop(&amp;h))</span><br><span class="line">fmt.Println(heap.Pop(&amp;h))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;最小堆和最大堆-golang实现&quot;&gt;&lt;a href=&quot;#最小堆和最大堆-golang实现&quot; class=&quot;headerlink&quot; title=&quot;最小堆和最大堆 golang实现&quot;&gt;&lt;/a&gt;最小堆和最大堆 golang实现&lt;/h1&gt;&lt;p&gt;二叉堆是一种特殊的堆，它满足
      
    
    </summary>
    
    
  </entry>
  
</feed>
