<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨家浩</title>
  
  
  <link href="https://yangjiahao106.github.io/atom.xml" rel="self"/>
  
  <link href="https://yangjiahao106.github.io/"/>
  <updated>2022-10-23T06:15:18.113Z</updated>
  <id>https://yangjiahao106.github.io/</id>
  
  <author>
    <name>Yangjiahao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker 部署kafka</title>
    <link href="https://yangjiahao106.github.io/2022/09/29/docker%20%E9%83%A8%E7%BD%B2kafka/"/>
    <id>https://yangjiahao106.github.io/2022/09/29/docker%20%E9%83%A8%E7%BD%B2kafka/</id>
    <published>2022-09-29T12:20:01.000Z</published>
    <updated>2022-10-23T06:15:18.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-部署-kafka"><a href="#docker-部署-kafka" class="headerlink" title="docker 部署 kafka"></a>docker 部署 kafka</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/zookeeper:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;2181:2181&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#- 匿名登录--必须开启</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_ANONYMOUS_LOGIN=yes</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./zookeeper:/bitnami/zookeeper</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">kafka_net:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/kafka:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9092:9092&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_BROKER_ID=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092</span> <span class="comment"># 实际绑定地址IP端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://IP:9092</span> <span class="comment"># 暴露出去的宿主机的地址和端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class="line">      <span class="comment">#- 全局消息过期时间 6 小时(测试时可以设置短一点)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LOG_RETENTION_HOURS=6</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kafka:/bitnami/kafka</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">kafka_net:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/kafka:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9093:9093&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_BROKER_ID=2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9093</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://IP:9093</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class="line">      <span class="comment">#- 全局消息过期时间 6 小时(测试时可以设置短一点)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LOG_RETENTION_HOURS=6</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kafka2:/bitnami/kafka</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">kafka_net:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">kafka2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;bitnami/kafka:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;9094:9094&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_BROKER_ID=3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9094</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://IP:9094</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ALLOW_PLAINTEXT_LISTENER=yes</span></span><br><span class="line">      <span class="comment">#- 全局消息过期时间 6 小时(测试时可以设置短一点)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_CFG_LOG_RETENTION_HOURS=6</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kafka3:/bitnami/kafka</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">kafka_net:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">kafka3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">kafka_manager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;hlebalbau/kafka-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9002:9000&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ZK_HOSTS:</span> <span class="string">&quot;zookeeper:2181&quot;</span></span><br><span class="line">      <span class="attr">APPLICATION_SECRET:</span> <span class="string">letmein</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">zookeeper</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">kafka3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">kafka_net:</span></span><br><span class="line">        <span class="attr">aliases:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">kafka_manager</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">kafka_net:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;docker-部署-kafka&quot;&gt;&lt;a href=&quot;#docker-部署-kafka&quot; class=&quot;headerlink&quot; title=&quot;docker 部署 kafka&quot;&gt;&lt;/a&gt;docker 部署 kafka&lt;/h1&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;services:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;zookeeper:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;bitnami/zookeeper:latest&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;2181:2181&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#- 匿名登录--必须开启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ALLOW_ANONYMOUS_LOGIN=yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./zookeeper:/bitnami/zookeeper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;networks:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;kafka_net:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;aliases:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;zookeeper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;kafka:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;bitnami/kafka:latest&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;9092:9092&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_BROKER_ID=1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 实际绑定地址IP端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://IP:9092&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 暴露出去的宿主机的地址和端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ALLOW_PLAINTEXT_LISTENER=yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#- 全局消息过期时间 6 小时(测试时可以设置短一点)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_LOG_RETENTION_HOURS=6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./kafka:/bitnami/kafka&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;depends_on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;zookeeper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;networks:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;kafka_net:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;aliases:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;kafka&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;kafka2:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;bitnami/kafka:latest&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;9093:9093&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_BROKER_ID=2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9093&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://IP:9093&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ALLOW_PLAINTEXT_LISTENER=yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#- 全局消息过期时间 6 小时(测试时可以设置短一点)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_LOG_RETENTION_HOURS=6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./kafka2:/bitnami/kafka&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;depends_on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;zookeeper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;networks:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;kafka_net:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;aliases:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;kafka2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;kafka3:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;bitnami/kafka:latest&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;9094:9094&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_BROKER_ID=3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9094&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://IP:9094&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ALLOW_PLAINTEXT_LISTENER=yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;#- 全局消息过期时间 6 小时(测试时可以设置短一点)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;KAFKA_CFG_LOG_RETENTION_HOURS=6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;./kafka3:/bitnami/kafka&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;depends_on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;zookeeper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;networks:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;kafka_net:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;aliases:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;kafka3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;kafka_manager:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;image:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;hlebalbau/kafka-manager:latest&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;9002:9000&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;ZK_HOSTS:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;zookeeper:2181&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;APPLICATION_SECRET:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;letmein&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;depends_on:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;zookeeper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;kafka&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;kafka2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;kafka3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;networks:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;kafka_net:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;aliases:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;kafka_manager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;networks:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;kafka_net:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>缓存穿透</title>
    <link href="https://yangjiahao106.github.io/2021/02/25/Redis-%E7%BC%93%E5%AD%98%E4%B8%8D%E4%B8%80%E8%87%B4-%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/"/>
    <id>https://yangjiahao106.github.io/2021/02/25/Redis-%E7%BC%93%E5%AD%98%E4%B8%8D%E4%B8%80%E8%87%B4-%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9-%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF-%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/</id>
    <published>2021-02-24T16:55:24.000Z</published>
    <updated>2021-03-01T15:00:43.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存不一致的问题"><a href="#缓存不一致的问题" class="headerlink" title="缓存不一致的问题"></a>缓存不一致的问题</h2><p>使用缓存时会出现缓存中的数据和数据库中的数据不一致的情况。</p><p>使用缓存的两种模式 </p><ol><li>只读模式</li></ol><p>当更新或删除数据时不更新缓存而是直接删除缓存</p><ol start="2"><li>读写模式</li></ol><p>当插入、更新或删除数据时同时更新缓存和数据库</p><h2 id="只读模式下出现缓存不一致的情况："><a href="#只读模式下出现缓存不一致的情况：" class="headerlink" title="只读模式下出现缓存不一致的情况："></a>只读模式下出现缓存不一致的情况：</h2><h5 id="情况一：缓存删除失败"><a href="#情况一：缓存删除失败" class="headerlink" title="情况一：缓存删除失败"></a>情况一：缓存删除失败</h5><p>更新/删除数据时<br>先删除缓存后更新数据库，如果缓存删除成功数据库更新失败，缓存会被重新创建此时没有影响。</p><p><strong>先更新数据库，后删除缓存，如果缓存删除失败则会出现缓存不一致。</strong></p><h5 id="解决方案：-重试机制"><a href="#解决方案：-重试机制" class="headerlink" title="解决方案：  重试机制"></a>解决方案：  重试机制</h5><p>可以把要删除的缓存值或者是要更新的数据库值暂存到消息队列中（例如使用 Kafka 消息队列）。当应用没有能够成功地删除缓存值或者是更新数据库值时，可以从消息队列中重新读取这些值，然后再次进行删除或更新。</p><h5 id="情况二：-并发请求"><a href="#情况二：-并发请求" class="headerlink" title="情况二： 并发请求"></a>情况二： 并发请求</h5><ol><li>先删除缓存再更新数据库</li></ol><table><thead><tr><th>时间</th><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>t1</td><td>删除数据X缓存</td><td></td></tr><tr><td>t2</td><td></td><td>查询X缓存中未命中，从数据库中查询数据并更新缓存</td></tr><tr><td>t3</td><td>更新数据库</td><td></td></tr></tbody></table><p>如上表所示，当出现并发操作时，最终会导致缓存中的数据依旧是旧值</p><ol start="2"><li>先更新数据库再删除缓存</li></ol><p>当数据库已经更新，缓存还未来得及删除时，其他请求仍然可能从缓存中读取到旧数据，但是时间很短对业务影响较小。</p><h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><ol><li>当采用先删除缓存再更新数据库时可以使用<strong>延迟双删</strong>来保证一致性，但延迟时间不好把握且不够优雅，伪代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis.delKey(X)</span><br><span class="line">db.update(X)</span><br><span class="line">Thread.sleep(N)</span><br><span class="line">redis.delKey(X)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用分布式锁，将请求串行化</li></ol><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指大量的应用请求无法在 Redis 缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。</p><p>导致原因有：</p><ol><li>缓存中大量数据同时过期， </li><li>Redis服务不可用</li></ol><p>避免方法：</p><ol><li>这些数据的过期时间增加一个较小的随机数（例如，随机增加 1~3 分钟）</li><li>构建 Redis 缓存高可靠集群</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿是指，针对某个访问非常频繁的热点数据的请求，无法在缓存中进行处理，紧接着，大量请求发送到了后端数据库，导致了数据库压力激增。缓存击穿的情况，经常发生在热点数据过期失效时，</p><p>解决方案：</p><ol><li>热点数据不设置过期时间</li><li>使用互斥锁， 代码如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public String get(key) &#123;</span><br><span class="line">      String value &#x3D; redis.get(key);</span><br><span class="line">      if (value &#x3D;&#x3D; null) &#123; &#x2F;&#x2F;代表缓存值过期</span><br><span class="line">          &#x2F;&#x2F;设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db</span><br><span class="line">  if (redis.setnx(key_mutex, 1, 3 * 60) &#x3D;&#x3D; 1) &#123;  &#x2F;&#x2F;代表设置成功</span><br><span class="line">               value &#x3D; db.get(key);</span><br><span class="line">                      redis.set(key, value, expire_secs);</span><br><span class="line">                      redis.del(key_mutex);</span><br><span class="line">              &#125; else &#123;  &#x2F;&#x2F;这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可</span><br><span class="line">                      sleep(50);</span><br><span class="line">                      get(key);  &#x2F;&#x2F;重试</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              return value;      </span><br><span class="line">          &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指要访问的数据既不在 Redis 缓存中，也不在数据库中，导致请求在访问缓存时，发生缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据。如果应用持续有大量请求，就会同时给缓存和数据库带来巨大压力。</p><p>一般来说，有两种情况：</p><ol><li>业务层误操作：缓存中的数据和数据库中的数据被误删除了，所以缓存和数据库中都没有数据；</li><li>恶意攻击：专门访问数据库中没有的数据。</li></ol><p>解决方案：</p><ol><li>一旦发生缓存穿透，可以针对查询的数据，在 Redis 中缓存一个空值或是和业务层协商确定的缺省值（例如，库存的缺省值可以设为 0）</li><li>使用布隆过滤器快速判断数据是否存在   </li><li>过滤不合法的请求</li></ol><h5 id="关于布隆过滤器"><a href="#关于布隆过滤器" class="headerlink" title="关于布隆过滤器"></a>关于布隆过滤器</h5><p>布隆过滤器由一个初值都为 0 的 bit 数组和 N 个哈希函数组成，可以用来快速判断某个数据是否存在。当我们想标记某个数据存在时（例如，数据已被写入数据库），布隆过滤器会通过三个操作完成标记：</p><ol><li>首先，使用 N 个哈希函数，分别计算这个数据的哈希值，得到 N 个哈希值。</li><li>然后，我们把这 N 个哈希值对 bit 数组的长度取模，得到每个哈希值在数组中的对应位置。</li><li>最后，我们把对应位置的 bit 位设置为 1，这就完成了在布隆过滤器中标记数据的操作。</li></ol><p>当需要查询某个数据时，我们就执行刚刚说的计算过程，先得到这个数据在 bit 数组中对应的 N 个位置。紧接着，我们查看 bit 数组中这 N 个位置上的 bit 值。只要这 N 个 bit 值有一个不为 1，这就表明布隆过滤器没有对该数据做过标记，所以，查询的数据一定没有在数据库中保存。</p><p><img src="https://static001.geekbang.org/resource/image/98/68/98f7d32499e4386b40aebc3622aa7268.jpg" alt="image"></p><p>注意布隆过滤器会有误判，由于数组长度有限， 不同的值可能映射到同一组bit上。它可以确定数据一定不存在，但不能确定一个数据是否一定存在。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;缓存不一致的问题&quot;&gt;&lt;a href=&quot;#缓存不一致的问题&quot; class=&quot;headerlink&quot; title=&quot;缓存不一致的问题&quot;&gt;&lt;/a&gt;缓存不一致的问题&lt;/h2&gt;&lt;p&gt;使用缓存时会出现缓存中的数据和数据库中的数据不一致的情况。&lt;/p&gt;</summary>
    
    
    
    
    <category term="redis" scheme="https://yangjiahao106.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis作为消息队列</title>
    <link href="https://yangjiahao106.github.io/2021/02/20/redis%E4%BD%9C%E4%B8%BA%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>https://yangjiahao106.github.io/2021/02/20/redis%E4%BD%9C%E4%B8%BA%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2021-02-20T04:39:06.000Z</published>
    <updated>2021-02-28T15:09:33.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis-作为消息队列"><a href="#redis-作为消息队列" class="headerlink" title="redis 作为消息队列"></a>redis 作为消息队列</h1><h2 id="消息队列的三个需求"><a href="#消息队列的三个需求" class="headerlink" title="消息队列的三个需求"></a>消息队列的三个需求</h2><ol><li>消息保序</li><li>处理重复的消息</li><li>保证消息可靠性</li></ol><h2 id="基于List的消息队列"><a href="#基于List的消息队列" class="headerlink" title="基于List的消息队列"></a>基于List的消息队列</h2><p>生产者使用LPUSH将消息写入list, 消费者使用BRPOP 取出消息。</p><p>List 本身就是按先进先出的顺序对数据进行存取的，所以可以保证消息的顺序。</p><p>对于重复消息的处理需要每个消息都有一个全局ID,消费者程序就可以对比收到的消息 ID 和记录的已处理过的消息 ID，来判断当前收到的消息有没有经过处理，从而保证幂等性。<br>List 本身是不会为每个消息生成 ID 号的，所以，消息的全局唯一 ID 号就需要生产者程序在发送消息前自行生成。生成之后，我们在用 LPUSH 命令把消息插入 List 时，需要在消息中包含这个全局唯一 ID，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LPUSH mq &quot;101030001:stock:5&quot;</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><p>关于消息的可靠性可以使用 BRPOPLPUSH命令，让消费者从一个List中取出消息同时放入另一个List(备份List)中,当消费者处理完成后再从备份List中删除，如果处理中发生宕机则可以从备份List再次读取消息。</p><p><img src="https://static001.geekbang.org/resource/image/50/3d/5045395da08317b546aab7eb698d013d.jpg" alt="image"></p><h3 id="基于List的消息队列的局限"><a href="#基于List的消息队列的局限" class="headerlink" title="基于List的消息队列的局限"></a>基于List的消息队列的局限</h3><ul><li> 不支持创建多个消费组，即一个消息不能被多个不同的消费者消费。</li></ul><h2 id="基于-Streams-的消息队列"><a href="#基于-Streams-的消息队列" class="headerlink" title="基于 Streams 的消息队列"></a>基于 Streams 的消息队列</h2><p>Redis 从 5.0 版本开始提供了 Streams 数据类型</p><p>Streams 是 Redis 专门为消息队列设计的数据类型，它提供了丰富的消息队列操作命令。</p><ul><li>XADD：插入消息，保证有序，可以自动生成全局唯一 ID；</li><li>XREAD：用于读取消息，可以按 ID 读取数据；</li><li>XREADGROUP：按消费组形式读取消息，需要被多个消费者消费则创建多个消费组；</li><li>XPENDING 和 XACK：XPENDING 命令可以用来查询每个消费组内所有消费者已读取但尚未确认的消息，而 XACK 命令用于向消息队列确认消息处理已完成。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://static001.geekbang.org/resource/image/b2/14/b2d6581e43f573da6218e790bb8c6814.jpg" alt="image"></p><h3 id="redis-作为消息队列的优缺点"><a href="#redis-作为消息队列的优缺点" class="headerlink" title="redis 作为消息队列的优缺点"></a>redis 作为消息队列的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>读写性能高</li><li>轻量级，部署简单</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>内存有限，消息积压过多造成内存压力过大</li><li>可靠性不够高，可能丢失消息。比如未开启AOF同步写盘时发生宕机，或者主从切换时从库还未同步完成。</li></ul>]]></content>
    
    
    <summary type="html">redis作为消息队列</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>redis笔记</title>
    <link href="https://yangjiahao106.github.io/2021/02/17/redis%E7%AC%94%E8%AE%B0/"/>
    <id>https://yangjiahao106.github.io/2021/02/17/redis%E7%AC%94%E8%AE%B0/</id>
    <published>2021-02-17T15:28:10.000Z</published>
    <updated>2021-02-21T08:28:05.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h3 id="关于redis-单线程"><a href="#关于redis-单线程" class="headerlink" title="关于redis 单线程"></a>关于redis 单线程</h3><p>redis 的单线程是指网络IO和键值对的读写是由一个线程完成的，但redis的其他功能 如持久化，异步删除，集群数据同步等，其实是由额外的线程完成的。</p><h3 id="为什么使用单线程？"><a href="#为什么使用单线程？" class="headerlink" title="为什么使用单线程？"></a>为什么使用单线程？</h3><p>系统中通常会存在被多个线程同时访问的共享资源，当多个线程要修改这个资源时为了保证资源的正确性，需要额外的机制来进行保证（比如互斥锁），这个额外的机制就会带来额外的开销</p><h3 id="为什么单线程这么快？"><a href="#为什么单线程这么快？" class="headerlink" title="为什么单线程这么快？"></a>为什么单线程这么快？</h3><p>Linux 中的 IO 多路复用机制是指一个线程处理多个 IO 流，就是我们经常听到的 select/epoll 机制。简单来说，在 Redis 只运行单线程的情况下，该机制允许内核中，同时存在多个监听套接字和已连接套接字。内核会一直监听这些套接字上的连接请求或数据请求。一旦有请求到达，就会交给 Redis 线程处理，这就实现了一个 Redis 线程处理多个 IO 流的效果。</p><p><img src="https://static001.geekbang.org/resource/image/00/ea/00ff790d4f6225aaeeebba34a71d8bea.jpg" alt="基于多路复用的Redis高性能IO模型"></p><p>为了在请求到达时能通知到 Redis 线程，select/epoll 提供了基于事件的回调机制，即针对不同事件的发生，调用相应的处理函数。那么，回调机制是怎么工作的呢？其实，select/epoll 一旦监测到 FD 上有请求到达时，就会触发相应的事件。这些事件会被放进一个事件队列，Redis 单线程对该事件队列不断进行处理。这样一来，Redis 无需一直轮询是否有请求实际发生，这就可以避免造成 CPU 资源浪费。同时，Redis 在对事件队列中的事件进行处理时，会调用相应的处理函数，这就实现了基于事件的回调。因为 Redis 一直在对事件队列进行处理，所以能及时响应客户端请求，提升 Redis 的响应性能。</p><h3 id="性能瓶颈"><a href="#性能瓶颈" class="headerlink" title="性能瓶颈"></a>性能瓶颈</h3><p>由于主要是主进程在执行操作所以主进程任何耗时的操作都可能是性能瓶颈<br>，比如bigkey, 全量返回等。</p><p>AOF重写创建bgrewriteaof子进程 和RDB创建bgsave子进程时要拷贝父进程的页表。如果 Redis 实例内存大，页表就会大，fork 执行时间就会长，这就会给主线程带来阻塞风险。(数据量过大可以使用切片集群)</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>目前，Redis 的持久化主要有两大机制，即 AOF（Append Only File）日志和 RDB 快照。</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF 日志是写后日志，即redis先执行命名将数据写入内存，然后才记录日志。这是</p><p>后些日志的两个好处：</p><ol><li>避免额外的检查开销，Redis 在向 AOF 里面记录日志的时候，并不会先去对这些命令进行语法检查。所以，如果先记日志再执行命令的话，日志中就有可能记录了错误的命令，Redis 在使用日志恢复数据时，就可能会出错。</li><li>不会阻塞redis的写入 </li></ol><p>AOF日志的两个风险</p><ol><li>未来得及写入AOF日志时如果发生宕机则可能丢失数据。</li><li>AOF日志写入是在主进程中进行的，如果写盘的压力大则可能阻塞后续的操作。</li></ol><h4 id="三种写回策略"><a href="#三种写回策略" class="headerlink" title="三种写回策略"></a>三种写回策略</h4><p><img src="https://static001.geekbang.org/resource/image/72/f8/72f547f18dbac788c7d11yy167d7ebf8.jpg" alt="image"></p><h4 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h4><p><img src="https://static001.geekbang.org/resource/image/6b/e8/6b054eb1aed0734bd81ddab9a31d0be8.jpg" alt="image"></p><p>每次 AOF 重写时，Redis 会先执行一个<strong>内存拷贝</strong> (Copy On Write机制)，用于重写；然后，使用两个日志保证在重写过程中，新写入的数据不会丢失。而且，因为 Redis 采用额外的线程进行数据重写，所以，这个过程并不会阻塞主线程。</p><h4 id="RDB-内存快照"><a href="#RDB-内存快照" class="headerlink" title="RDB 内存快照"></a>RDB 内存快照</h4><p>和 AOF 相比，RDB 记录的是某一时刻的数据，并不是操作，所以，在做数据恢复时，我们可以直接把 RDB 文件读入内存，很快地完成恢复</p><p>Redis 提供了两个命令来生成 RDB 文件，分别是 save 和 bgsave。</p><ol><li>save：在主线程中执行，会导致阻塞；</li><li>bgsave：创建一个子进程，专门用于写入 RDB 文件，避免了主线程的阻塞，这也是 Redis RDB 文件生成的默认配置。</li></ol><h4 id="Copy-On-Write-写时复制技术"><a href="#Copy-On-Write-写时复制技术" class="headerlink" title="Copy-On-Write (写时复制技术)"></a>Copy-On-Write (写时复制技术)</h4><p>Redis 就会借助操作系统提供的写时复制技术（Copy-On-Write, COW），在执行快照的同时，正常处理写操作。</p><p>简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。</p><p>此时，如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，<br><img src="https://static001.geekbang.org/resource/image/4d/cc/4dc5fb99a1c94f70957cce1ffef419cc.jpg" alt="image"></p><h4 id="关于-AOF-和-RDB-的选择问题的三点建议："><a href="#关于-AOF-和-RDB-的选择问题的三点建议：" class="headerlink" title="关于 AOF 和 RDB 的选择问题的三点建议："></a>关于 AOF 和 RDB 的选择问题的三点建议：</h4><ul><li>数据不能丢失时，内存快照和 AOF 的混合使用是一个很好的选择；</li><li>如果允许分钟级别的数据丢失，可以只使用 RDB；</li><li>如果只用 AOF，优先使用 everysec 的配置选项，因为它在可靠性和性能之间取了一个平衡。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;redis&quot;&gt;&lt;a href=&quot;#redis&quot; class=&quot;headerlink&quot; title=&quot;redis&quot;&gt;&lt;/a&gt;redis&lt;/h1&gt;&lt;h3 id=&quot;关于redis-单线程&quot;&gt;&lt;a href=&quot;#关于redis-单线程&quot; class=&quot;headerlink&quot; title=&quot;关于redis 单线程&quot;&gt;&lt;/a&gt;关于redis 单线程&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>为什么git status如此之快？</title>
    <link href="https://yangjiahao106.github.io/2021/02/08/%E4%B8%BA%E4%BB%80%E4%B9%88git-status%E5%A6%82%E6%AD%A4%E4%B9%8B%E5%BF%AB/"/>
    <id>https://yangjiahao106.github.io/2021/02/08/%E4%B8%BA%E4%BB%80%E4%B9%88git-status%E5%A6%82%E6%AD%A4%E4%B9%8B%E5%BF%AB/</id>
    <published>2021-02-08T11:06:08.000Z</published>
    <updated>2021-02-21T08:28:05.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么-git-status-如此之快？"><a href="#为什么-git-status-如此之快？" class="headerlink" title="为什么 git  status 如此之快？"></a>为什么 git  status 如此之快？</h2><h3 id="先扯一下-git-checkout-，-reset-为什么如此之快"><a href="#先扯一下-git-checkout-，-reset-为什么如此之快" class="headerlink" title="先扯一下 git checkout ， reset 为什么如此之快"></a>先扯一下 git checkout ， reset 为什么如此之快</h3><p>最近发现了一篇文章<br><a href="https://tonybai.com/2020/04/07/illustrated-tale-of-git-internal-key-concepts/">图解git原理的几个关键概念</a> 这篇文章将git的核心原理讲解得非常清楚</p><p>之前经常想在为什么在一个拥有上万个文件和上万个commit的项目中git的checkout速度还能如此快， 原因就是使用了默克尔树， 每一次commit 都会创建一个新的root节点,即每个commit都有一颗完整的默克尔树将所有文件组织起来（相当于一个<strong>快照</strong>）， 而这些默克尔树的大部分节点都是公用的，所以大大节省了空间。</p><p>所以每次checkout 操作只需要用对应的默克尔树将<strong>快照</strong>取出来，<br>所以branch和tag 只需要是一个指向commit 的指针。</p><h4 id="回到标题，-为什么一个拥有上万文件的项目执行git-status-时Git能快速地将发生修改的文件找出来？"><a href="#回到标题，-为什么一个拥有上万文件的项目执行git-status-时Git能快速地将发生修改的文件找出来？" class="headerlink" title="回到标题， 为什么一个拥有上万文件的项目执行git status 时Git能快速地将发生修改的文件找出来？"></a>回到标题， 为什么一个拥有上万文件的项目执行git status 时Git能快速地将发生修改的文件找出来？</h4><p>一开始我的猜测是遍历项目下的所有文件并计算哈希然后和最近的快照中保存的哈希进行比较。 但感觉如果计算哈希速度不可能如此快速。<br>通过一通搜索发现了这篇文章<br><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/docs/technical/racy-git.txt">Use of index and Racy Git problem</a></p><p>下面说一下我的大概理解</p><h4 id="先介绍一下git-index-git-index"><a href="#先介绍一下git-index-git-index" class="headerlink" title="先介绍一下git index (.git/index)"></a>先介绍一下git index (.git/index)</h4><p>Git索引是一个在你的工作目录和项目仓库间的暂存区(staging area). 有了它, 你可以把许多内容的修改一起提交(commit). 如果你创建了一个提交(commit), 那么提交的是当前索引(index)里的内容, 而不是工作目录中的内容.</p><p>因此只要执行了git add，就算工作目录中的文件被误删除，也不会引起文件的丢失，因为文件已经被存入Git对象，并使用索引进行定位。</p><p>我们可以通过git ls-files –stage命令看到仓库中每一个文件及其所对应的文件对象，也可以直接通过查看二进制索引文件的方式来了解更多信息</p><p>Index 文件是用二进制存储的，包含有 ctime 和 mtime 时间信息，文件存储的设备信息，磁盘的inode信息，文件的 mode信息，UID，GID，文件大小，文件的SHA-1码，flag，文件的file path等信息。</p><h4 id="简要过程"><a href="#简要过程" class="headerlink" title="简要过程"></a>简要过程</h4><p>当执行git status 时Git会启动多个线程，对工作区中所有的文件执行stat命令，得到文件<a href="https://www.cnblogs.com/cherishry/p/5885107.html">节点信息</a>中的修改时间，文件大小等信息然后和index中保存的信息进行比较，如果一样则说明该文件没有发生修改。</p><p>这里又出现了一个问题，stat命令得到的时间戳仅仅精确到秒，如果文件修改的很快并且大小又不变岂不是会漏掉更新。为了解决这个问题需要增加以下逻辑：</p><p>如果该文件的修改时间小于index文件的的修改时间，则可以肯定改文件没有发生修改， 如果修改时间大于或者等于index文件的修改时间则需要找到object中保存的原始文件进行比较判断是否发生修改。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/1778862/how-does-git-detect-that-a-file-has-been-modified">How does git detect that a file has been modified?</a></p><p><a href="https://mirrors.edge.kernel.org/pub/software/scm/git/docs/technical/racy-git.txt">Use of index and Racy Git problem</a></p><p><a href="https://www.quora.com/How-is-it-possible-that-git-status-is-so-fast">How is it possible that ‘git status’ is so fast?</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么-git-status-如此之快？&quot;&gt;&lt;a href=&quot;#为什么-git-status-如此之快？&quot; class=&quot;headerlink&quot; title=&quot;为什么 git  status 如此之快？&quot;&gt;&lt;/a&gt;为什么 git  status 如此之快？&lt;/h2&gt;&lt;h3 id=&quot;先扯一下-git-checkout-，-reset-为什么如此之快&quot;&gt;&lt;a href=&quot;#先扯一下-git-checkout-，-reset-为什么如此之快&quot; class=&quot;headerlink&quot; title=&quot;先扯一下 git checkout ， reset 为什么如此之快&quot;&gt;&lt;/a&gt;先扯一下 git checkout ， reset 为什么如此之快&lt;/h3&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>go 反射 reflect.md</title>
    <link href="https://yangjiahao106.github.io/2021/01/31/go%E5%8F%8D%E5%B0%84/"/>
    <id>https://yangjiahao106.github.io/2021/01/31/go%E5%8F%8D%E5%B0%84/</id>
    <published>2021-01-31T11:11:50.000Z</published>
    <updated>2021-02-28T06:09:33.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go-反射reflect"><a href="#go-反射reflect" class="headerlink" title="go 反射reflect"></a>go 反射reflect</h2><p>go 的反射是通过reflect包来实现的</p><h3 id="reflect-Type"><a href="#reflect-Type" class="headerlink" title="reflect.Type"></a>reflect.Type</h3><p>函数 reflect.TypeOf 接受任意的 interface{} 类型，并以 reflect.Type 形式返回其动态类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">t := reflect.TypeOf(<span class="number">3</span>)  <span class="comment">// a reflect.Type</span></span><br><span class="line">fmt.Println(t.String()) <span class="comment">// &quot;int&quot;</span></span><br><span class="line">fmt.Println(t)          <span class="comment">// &quot;int&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="reflect-Value"><a href="#reflect-Value" class="headerlink" title="reflect.Value"></a>reflect.Value</h3><p>reflect.Value 可以装载任意类型的值。函数 reflect.ValueOf 接受任意的 interface{} 类型，并返回一个装载着其动态值的 reflect.Value。和 reflect.TypeOf 类似，reflect.ValueOf 返回的结果也是具体的类型，但是 reflect.Value 也可以持有一个接口值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v := reflect.ValueOf(<span class="number">3</span>) <span class="comment">// a reflect.Value</span></span><br><span class="line">fmt.Println(v)          <span class="comment">// &quot;3&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, v)   <span class="comment">// &quot;3&quot;</span></span><br><span class="line">fmt.Println(v.String()) <span class="comment">// <span class="doctag">NOTE:</span> &quot;&lt;int Value&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">t := v.Type()           <span class="comment">// a reflect.Type</span></span><br><span class="line">fmt.Println(t.String()) <span class="comment">// &quot;int&quot;</span></span><br></pre></td></tr></table></figure><p>reflect.ValueOf 的逆操作是 reflect.Value.Interface 方法。它返回一个 interface{} 类型，装载着与 reflect.Value 相同的具体值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">v := reflect.ValueOf(<span class="number">3</span>) <span class="comment">// a reflect.Value</span></span><br><span class="line">x := v.Interface()      <span class="comment">// an interface&#123;&#125;</span></span><br><span class="line">i := x.(<span class="keyword">int</span>)            <span class="comment">// an int</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, i)   <span class="comment">// &quot;3&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> reflect.Value 的 Kind 方法来替代之前的类型 switch。虽然还是有无穷多的类型，但是它们的 kinds 类型却是有限的：Bool、String 和 所有数字类型的基础类型；Array 和 Struct 对应的聚合类型；Chan、Func、Ptr、Slice 和 Map 对应的引用类型；interface 类型；还有表示空值的 Invalid 类型。（空的 reflect.Value 的 kind 即为 Invalid。）</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Any formats any value as a string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Any</span><span class="params">(value <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> formatAtom(reflect.ValueOf(value))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// formatAtom formats a value without inspecting its internal structure.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">formatAtom</span><span class="params">(v reflect.Value)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> v.Kind() &#123;</span><br><span class="line">    <span class="keyword">case</span> reflect.Invalid:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;invalid&quot;</span></span><br><span class="line">    <span class="keyword">case</span> reflect.Int, reflect.Int8, reflect.Int16,</span><br><span class="line">        reflect.Int32, reflect.Int64:</span><br><span class="line">        <span class="keyword">return</span> strconv.FormatInt(v.Int(), <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">case</span> reflect.Uint, reflect.Uint8, reflect.Uint16,</span><br><span class="line">        reflect.Uint32, reflect.Uint64, reflect.Uintptr:</span><br><span class="line">        <span class="keyword">return</span> strconv.FormatUint(v.Uint(), <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// ...floating-point and complex cases omitted for brevity...</span></span><br><span class="line">    <span class="keyword">case</span> reflect.Bool:</span><br><span class="line">        <span class="keyword">return</span> strconv.FormatBool(v.Bool())</span><br><span class="line">    <span class="keyword">case</span> reflect.String:</span><br><span class="line">        <span class="keyword">return</span> strconv.Quote(v.String())</span><br><span class="line">    <span class="keyword">case</span> reflect.Chan, reflect.Func, reflect.Ptr, reflect.Slice, reflect.Map:</span><br><span class="line">        <span class="keyword">return</span> v.Type().String() + <span class="string">&quot; 0x&quot;</span> +</span><br><span class="line">            strconv.FormatUint(<span class="keyword">uint64</span>(v.Pointer()), <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">// reflect.Array, reflect.Struct, reflect.Interface</span></span><br><span class="line">        <span class="keyword">return</span> v.Type().String() + <span class="string">&quot; value&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过reflect-Value-修改值"><a href="#通过reflect-Value-修改值" class="headerlink" title="通过reflect.Value 修改值"></a>通过reflect.Value 修改值</h3><p>有一些reflect.Values是可取地址的；其它一些则不可以。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">2</span>                   <span class="comment">// value   type    variable?</span></span><br><span class="line">a := reflect.ValueOf(<span class="number">2</span>)  <span class="comment">// 2       int     no</span></span><br><span class="line">b := reflect.ValueOf(x)  <span class="comment">// 2       int     no</span></span><br><span class="line">c := reflect.ValueOf(&amp;x) <span class="comment">// &amp;x      *int    no</span></span><br><span class="line">d := c.Elem()            <span class="comment">// 2       int     yes (x)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上，所有通过reflect.ValueOf(x)返回的reflect.Value都是不可取地址的。但是对于d，它是c的解引用方式生成的，指向另一个变量，因此是可取地址的。我们可以通过调用reflect.ValueOf(&amp;x).Elem()，来获取任意变量x对应的可取地址的Value。</p><p>我们可以通过调用reflect.Value的CanAddr方法来判断其是否可以被取地：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(a.CanAddr()) <span class="comment">// &quot;false&quot;</span></span><br><span class="line">fmt.Println(b.CanAddr()) <span class="comment">// &quot;false&quot;</span></span><br><span class="line">fmt.Println(c.CanAddr()) <span class="comment">// &quot;false&quot;</span></span><br><span class="line">fmt.Println(d.CanAddr()) <span class="comment">// &quot;true&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>slice的索引表达式e[i]将隐式地包含一个指针，它就是可取地址的，即使开始的e表达式不支持也没有关系。以此类推，reflect.ValueOf(e).Index(i)对应的值也是可取地址的，即使原始的reflect.ValueOf(e)不支持也没有关系。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">v = reflect.ValueOf(s)</span><br><span class="line"></span><br><span class="line">fmt.Println(v.CanAddr())                <span class="comment">// false</span></span><br><span class="line">fmt.Println(v.Index(<span class="number">0</span>).CanAddr())       <span class="comment">// true</span></span><br><span class="line">reflect.ValueOf(s).Index(<span class="number">0</span>).SetInt(<span class="number">0</span>)</span><br><span class="line">fmt.Println(s)                          <span class="comment">// [0, 2, 3]</span></span><br></pre></td></tr></table></figure><p>修改变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">x := <span class="number">2</span></span><br><span class="line">d := reflect.ValueOf(&amp;x).Elem()   <span class="comment">// d refers to the variable x</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">px := d.Addr().Interface().(*<span class="keyword">int</span>) <span class="comment">// px := &amp;x</span></span><br><span class="line">*px = <span class="number">3</span>                           <span class="comment">// x = 3</span></span><br><span class="line">fmt.Println(x)                    <span class="comment">// &quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">d.Set(reflect.ValueOf(<span class="number">4</span>))</span><br><span class="line">fmt.Println(x) <span class="comment">// &quot;4&quot;</span></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line">d.SetInt(<span class="number">5</span>)</span><br><span class="line">fmt.Println(x) <span class="comment">// &quot;5&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意： 要确保该变量可以接受对应的值；</p><p>对于一个引用interface{}类型的reflect.Value调用SetInt会导致panic异常，即使那个interface{}变量对于整数类型也不行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="number">1</span></span><br><span class="line">rx := reflect.ValueOf(&amp;x).Elem()</span><br><span class="line">rx.SetInt(<span class="number">2</span>)                     <span class="comment">// OK, x = 2</span></span><br><span class="line">rx.Set(reflect.ValueOf(<span class="number">3</span>))       <span class="comment">// OK, x = 3</span></span><br><span class="line">rx.SetString(<span class="string">&quot;hello&quot;</span>)            <span class="comment">// panic: string is not assignable to int</span></span><br><span class="line">rx.Set(reflect.ValueOf(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// panic: string is not assignable to int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">ry := reflect.ValueOf(&amp;y).Elem()</span><br><span class="line">ry.SetInt(<span class="number">2</span>)                     <span class="comment">// panic: SetInt called on interface Value</span></span><br><span class="line">ry.Set(reflect.ValueOf(<span class="number">3</span>))       <span class="comment">// OK, y = int(3)</span></span><br><span class="line">ry.SetString(<span class="string">&quot;hello&quot;</span>)            <span class="comment">// panic: SetString called on interface Value</span></span><br><span class="line">ry.Set(reflect.ValueOf(<span class="string">&quot;hello&quot;</span>)) <span class="comment">// OK, y = &quot;hello&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过反射机制可以读取结构体中未导出的成员， 但不可修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">stdout := reflect.ValueOf(os.Stdout).Elem() <span class="comment">// *os.Stdout, an os.File var</span></span><br><span class="line">fmt.Println(stdout.Type())                  <span class="comment">// &quot;os.File&quot;</span></span><br><span class="line">fd := stdout.FieldByName(<span class="string">&quot;fd&quot;</span>)</span><br><span class="line">fmt.Println(fd.Int()) <span class="comment">// &quot;1&quot;</span></span><br><span class="line">fd.SetInt(<span class="number">2</span>)          <span class="comment">// panic: unexported field</span></span><br><span class="line">fmt.Println(fd.CanAddr(), fd.CanSet()) <span class="comment">// &quot;true false&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用：下面代码表示如果传入的结构体中有ImageUrl字段则加上一个后缀</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compressImage</span><span class="params">(req <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">modelType := reflect.TypeOf(req).Elem()</span><br><span class="line">modelValue := reflect.ValueOf(req).Elem()</span><br><span class="line">_, ok = modelType.FieldByName(<span class="string">&quot;ImageUrl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">value := modelValue.FieldByName(<span class="string">&quot;ImageUrl&quot;</span>)</span><br><span class="line">imageUrl := value.String()</span><br><span class="line"><span class="keyword">if</span> strings.HasSuffix(imageUrl, <span class="string">&quot;.jpg&quot;</span>)&#123;</span><br><span class="line">value.SetString(imageUrl + <span class="string">&quot;!compress&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://books.studygolang.com/gopl-zh/ch12/ch12-05.html">通过reflect.Value修改值</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;go-反射reflect&quot;&gt;&lt;a href=&quot;#go-反射reflect&quot; class=&quot;headerlink&quot; title=&quot;go 反射reflect&quot;&gt;&lt;/a&gt;go 反射reflect&lt;/h2&gt;&lt;p&gt;go 的反射是通过reflect包来实现的&lt;/p&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://yangjiahao106.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>mysql 事务隔离</title>
    <link href="https://yangjiahao106.github.io/2021/01/10/mysql-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"/>
    <id>https://yangjiahao106.github.io/2021/01/10/mysql-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/</id>
    <published>2021-01-10T08:05:59.000Z</published>
    <updated>2021-02-21T08:28:05.985Z</updated>
    
    <content type="html"><![CDATA[<p>隔离级别 |  脏读（Dirty Read | 不可重复读（NonRepeatable Read）|幻读（Phantom Read）<br>—|— | — | — | —<br>读未提交（READ UNCOMMITTED | 可能   | 可能 | 可能<br>读已提交（READ COMMITTED） | 不可能 | 可能 | 可能<br>可重复读（REPEATABLE READ）| 不可能 | 不可能 | 可能<br>可串行化（Serializable）   | 不可能 | 不可能 | 不可能</p><h2 id="读未提交（READ-UNCOMMITTED）"><a href="#读未提交（READ-UNCOMMITTED）" class="headerlink" title="读未提交（READ UNCOMMITTED）"></a>读未提交（READ UNCOMMITTED）</h2><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/iL6jfZxiHJ.png!large" alt="image"></p><blockquote><p>在读未提交隔离级别下，事务A可以读取到事务B修改过但未提交的数据。</p><p>可能发生脏读、不可重复读和幻读问题，一般很少使用此隔离级别。</p></blockquote><h2 id="读已提交-READ-COMMITTED"><a href="#读已提交-READ-COMMITTED" class="headerlink" title="读已提交 (READ COMMITTED)"></a>读已提交 (READ COMMITTED)</h2><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/BsMcuysaIB.png!large" alt="image"></p><blockquote><p>在读已提交隔离级别下，事务B只能在事务A修改过并且已提交后才能读取到事务B修改的数据。</p><p>读已提交隔离级别解决了脏读的问题，但可能发生不可重复读和幻读问题，一般很少使用此隔离级别。</p></blockquote><h2 id="可重复读-REPEATABLE-READ"><a href="#可重复读-REPEATABLE-READ" class="headerlink" title="可重复读 (REPEATABLE READ)"></a>可重复读 (REPEATABLE READ)</h2><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/yjRtVOpMBZ.png!large" alt="image"></p><blockquote><p>在可重复读隔离级别下，事务B只能在事务A修改过数据并提交后，自己也提交事务后，才能读取到事务B修改的数据。</p><p>可重复读隔离级别解决了脏读和不可重复读的问题，但可能发生幻读问题。</p><p>提问：为什么上了写锁（写操作），别的事务还可以读操作？</p><p>因为InnoDB有MVCC机制（多版本并发控制），可以使用快照读，而不会被阻塞。</p></blockquote><h2 id="可串行化（SERIALIZABLE）"><a href="#可串行化（SERIALIZABLE）" class="headerlink" title="可串行化（SERIALIZABLE）"></a>可串行化（SERIALIZABLE）</h2><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/S0Y1nk8yv6.png!large" alt="image"></p><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/LIfaeTxwPL.png!large" alt="image"></p><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/q4vVuHzqO0.png!large" alt="image"></p><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/l1BwLlDlYp.png!large" alt="image"></p><blockquote><p>各种问题（脏读、不可重复读、幻读）都不会发生，通过加锁实现（读锁和写锁）。</p></blockquote><h2 id="脏读（Dirty-Read）"><a href="#脏读（Dirty-Read）" class="headerlink" title="脏读（Dirty Read）"></a>脏读（Dirty Read）</h2><blockquote><p>一个事务读到了另一个未提交事务修改过的数据</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/202002/04/32495/Wcv8DTijTL.png!large" alt="image"></p><h2 id="不可重复读（Non-Repeatable-Read）"><a href="#不可重复读（Non-Repeatable-Read）" class="headerlink" title="不可重复读（Non-Repeatable Read）"></a>不可重复读（Non-Repeatable Read）</h2><blockquote><p>一个事务只能读到另一个已经提交的事务修改过的数据，并且其他事务每对该数据进行一次修改并提交后，该事务都能查询得到最新值。（不可重复读在读未提交和读已提交隔离级别都可能会出现）</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/YdNemia6wc.png!large" alt="image"></p><h2 id="幻读（Phantom）"><a href="#幻读（Phantom）" class="headerlink" title="幻读（Phantom）"></a>幻读（Phantom）</h2><blockquote><p>一个事务先根据某些条件查询出一些记录，之后另一个事务又向表中插入了符合这些条件的记录，原先的事务再次按照该条件查询时，能把另一个事务插入的记录也读出来。（幻读在读未提交、读已提交、可重复读隔离级别都可能会出现）</p></blockquote><p><img src="https://cdn.learnku.com/uploads/images/202002/04/32495/0sCtxw1Jno.png!large" alt="image"></p><h3 id="不可重复读和幻读到底有什么区别呢？"><a href="#不可重复读和幻读到底有什么区别呢？" class="headerlink" title="不可重复读和幻读到底有什么区别呢？"></a>不可重复读和幻读到底有什么区别呢？</h3><ol><li>不可重复读是读取了其他事务更改的数据，针对update操作</li></ol><p>解决：使用行级锁，锁定该行，事务A多次读取操作完成后才释放该锁，这个时候才允许其他事务更改刚才的数据。</p><ol start="2"><li> 幻读是读取了其他事务新增的数据，针对insert和delete操作</li></ol><p>解决：使用表级锁，锁定整张表，事务A多次读取数据总量之后才释放该锁，这个时候才允许其他事务新增数据。</p><h3 id="MVCC-快照读和当前读"><a href="#MVCC-快照读和当前读" class="headerlink" title="MVCC 快照读和当前读"></a>MVCC 快照读和当前读</h3><h4 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> ....</span><br></pre></td></tr></table></figure><h4 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h4><blockquote><p>对于会对数据修改的操作(update、insert、delete)都是采用当前读的模式。在执行这几个操作时会读取最新的记录，即使是别的事务提交的数据也可以查询到。假设要update一条记录，但是在另一个事务中已经delete掉这条数据并且commit了，如果update就会产生冲突，所以在update的时候需要知道最新的数据。读取的是最新的数据，需要加锁。以下第一个语句需要加共享锁，其它都需要加排它锁。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ? lock <span class="keyword">in</span> share mode; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> ? <span class="keyword">for</span> update; </span><br><span class="line"><span class="keyword">insert</span>; </span><br><span class="line">update; </span><br><span class="line"><span class="keyword">delete</span>;</span><br></pre></td></tr></table></figure><hr><h6 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h6><blockquote><p>加锁需要在最新的数据上加锁所以加锁一定会触发当前读</p><p><strong>如果触发了当前读RR隔离级别下就会出现不可重复读和幻读的</strong></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.aliyun.com/article/743691">彻底搞懂 MySQL 事务的隔离级别</a></p><p><a href="https://cloud.tencent.com/developer/article/1450773">快速理解脏读、不可重复读、幻读和MVCC</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;隔离级别 |  脏读（Dirty Read | 不可重复读（NonRepeatable Read）|幻读（Phantom Read）&lt;br&gt;—|— | — | — | —&lt;br&gt;读未提交（READ UNCOMMITTED | 可能   | 可能 | 可能&lt;br&gt;读已提交（READ COMMITTED） | 不可能 | 可能 | 可能&lt;br&gt;可重复读（REPEATABLE READ）| 不可能 | 不可能 | 可能&lt;br&gt;可串行化（Serializable）   | 不可能 | 不可能 | 不可能&lt;/p&gt;
&lt;h2 id=&quot;读未提交（READ-UNCOMMITTED）&quot;&gt;&lt;a href=&quot;#读未提交（READ-UNCOMMITTED）&quot; class=&quot;headerlink&quot; title=&quot;读未提交（READ UNCOMMITTED）&quot;&gt;&lt;/a&gt;读未提交（READ UNCOMMITTED）&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql MVCC 的实现</title>
    <link href="https://yangjiahao106.github.io/2021/01/10/mysql%20-mvcc/"/>
    <id>https://yangjiahao106.github.io/2021/01/10/mysql%20-mvcc/</id>
    <published>2021-01-10T08:05:59.000Z</published>
    <updated>2021-02-21T08:28:05.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-mvcc"><a href="#mysql-mvcc" class="headerlink" title="mysql mvcc"></a>mysql mvcc</h1><p>MVCC(Multi Version Concurrency Control的简称)，代表多版本并发控制。与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。<br>MVCC最大的优势：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能</p><h2 id="mvcc-的实现"><a href="#mvcc-的实现" class="headerlink" title="mvcc 的实现"></a>mvcc 的实现</h2><p>InnoDB数据组织方式分为主键索引（聚簇索引）和二级索引</p><p>聚簇索引和二级索引都包含了<strong>DELETED BIT</strong>标记位来标识记录是否被删除，真正的删除是在事务commit之后且没有读会引用该版本数据的时候。</p><h5 id="1-InnoDB-为主键索引上每一行数据增加了三个隐藏列用于实现MVCC。"><a href="#1-InnoDB-为主键索引上每一行数据增加了三个隐藏列用于实现MVCC。" class="headerlink" title="1. InnoDB 为主键索引上每一行数据增加了三个隐藏列用于实现MVCC。"></a>1. InnoDB 为主键索引上每一行数据增加了三个隐藏列用于实现MVCC。</h5><ul><li>DB_TRX_ID, 6byte, 创建这条记录/最后一次更新这条记录的事务ID</li></ul><ul><li>DB_ROLL_PTR, 7byte，回滚指针，指向这条记录的上一个版本（存储于rollback segment里）</li></ul><ul><li>DB_ROW_ID, 6byte，隐含的自增ID，如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</li></ul><p>对于主键索引，更新是在原记录位置更新，记录的历史版本是放在专门的rollback segment里（undo log）    　</p><pre><code>UPDATE非主键语句的效果是　　　　老记录被复制到rollback segment中形成undo log，DB_TRX_ID和DB_ROLL_PTR不动　　　　新记录的DB_TRX_ID = 当前事务ID，DB_ROLL_PTR指向老记录形成的undo log　　　　这样就能通过DB_ROLL_PTR找到这条记录的历史版本。如果对同一行记录执行连续的update操作，新记录与undo log会组成一个链表，遍历这个链表可以看到这条记录的变迁）</code></pre><h5 id="2-MySQL的一致性读，是通过一个叫做read-view的结构来实现的"><a href="#2-MySQL的一致性读，是通过一个叫做read-view的结构来实现的" class="headerlink" title="2. MySQL的一致性读，是通过一个叫做read view的结构来实现的"></a>2. MySQL的一致性读，是通过一个叫做read view的结构来实现的</h5><p>read_view中维护了系统中活跃事务集合的快照，<strong>这些活跃事务ID的最小值为up_limit_id，最大值为low_limit_id</strong></p><h6 id="ReadView主要结构"><a href="#ReadView主要结构" class="headerlink" title="ReadView主要结构"></a><a href="https://github.com/twitter-forks/mysql/blob/master/storage/innobase/include/read0read.h#L124">ReadView</a>主要结构</h6><pre><code>low_limit_id。 活跃事务ID的最大值，当事务ID大于等于该值的数据修改不可见up_limit_id. 活跃事务ID的最小值，事务ID小于该值的数据修改可见。creator_trx_id。创建该ReadView的事务ID，该事务ID的数据修改可见。trx_ids。当快照创建时的活跃读写事务列表。low_limit_no。 /*!&lt; The view does not need to see the undo            logs for transactions whose transaction number            is strictly smaller (&lt;) than this value: they            can be removed in purge if not needed by other            views */   用于Purge不需要的Undo。</code></pre><p>SELECT操作返回结果的可见性是由以下规则决定的：</p><pre><code>DB_TRX_ID &lt; up_limit_id  -&gt; 此记录的最后一次修改在read_view创建之前，可见DB_TRX_ID &gt;= low_limit_id   -&gt; 此记录的最后一次修改在read_view创建之后，不可见  -&gt;  需要用DB_ROLL_PTR查找undo log(此记录的上一次修改)，然后根据undo log的DB_TRX_ID再计算一次可见性up_limit_id &lt;= DB_TRX_ID &lt; low_limit_id -&gt; 需要进一步检查read_view中是否含有DB_TRX_ID　　　　DB_TRX_ID ∉ m_ids -&gt; 此记录的最后一次修改在read_view创建之前，可见　　　　DB_TRX_ID ∈ m_ids -&gt; 此记录的最后一次修改在read_view创建时尚未保存，不可见  -&gt;  需要用DB_ROLL_PTR查找undo log(此记录的上一次修改)，然后根据undo log的DB_TRX_ID再从头计算一次可见性经过上述规则的决议，我们得到了这条记录相对read_view来说，可见的结果。此时，如果这条记录的delete_flag为true，说明这条记录已被删除，不返回。　　　如果delete_flag为false，说明此记录可以安全返回给客户端</code></pre><h5 id="4-用MVCC这一种手段可以同时实现RR与RC隔离级别"><a href="#4-用MVCC这一种手段可以同时实现RR与RC隔离级别" class="headerlink" title="4 用MVCC这一种手段可以同时实现RR与RC隔离级别"></a>4 用MVCC这一种手段可以同时实现RR与RC隔离级别</h5><p>它们的不同之处在于：</p><p>RR：read view是在first touch read时创建的，也就是执行事务中的第一条SELECT语句的瞬间，后续所有的SELECT都是复用这个read view，所以能保证每次读取的一致性（可重复读的语义）</p><p>RC：每次读取，都会创建一个新的read view。这样就能读取到其他事务已经COMMIT的内容。</p><p>所以对于InnoDB来说，RR虽然比RC隔离级别高，但是开销反而相对少。</p><p>补充：RU的实现就简单多了，不使用read view，也不需要管什么DB_TRX_ID和DB_ROLL_PTR，直接读取最新的record即可。</p><h5 id="5-二级索引与MVCC"><a href="#5-二级索引与MVCC" class="headerlink" title="5. 二级索引与MVCC"></a>5. 二级索引与MVCC</h5><pre><code>MySQL的索引分为聚簇索引(clustered index)与二级索引(secondary index)两种。刚才讲的内容是基于聚簇索引的，只有聚簇索引中含有DB_TRX_ID与DB_ROLL_PTR隐藏列，可以比较容易的实现MVCC但是二级索引中并不含有这几个隐藏列，只含有1个bit的deleted flag，咋办？ 　　好办，如果UPDATE语句涉及到二级索引的键值，将老的二级索引的deleted flag标记为true，然后创建一条新的二级索引记录即可。但是如果想根据二级索引来做查询，这可就麻烦了。因为二级索引不维护版本信息，无法判断二级索引中记录的可见性。所以还是需要回到聚簇索引中来：    根据二级索引维护的主键值去聚簇索引中查找记录（使用MVCC规则）        如果查出来的结果跟二级索引里维护的结果相同 -&gt; 返回，如果不同 -&gt; 丢弃如果对于一条查询语句，二级索引中有很多条满足条件的结果（连续多次更新，导致二级索引中有很多条记录），那上面这个流程就比较低效了。所以InnoDB的作者搞了个机智的小优化：在二级索引中，用一个额外的名为MAX_TRX_ID的变量来记录最后一次更新二级索引的事务的ID那么，如果当前语句关联的read_view的 up_limit_id &gt; MAX_TRX_ID，说明在创建read_view时最后一次更新二级索引的事务已经结束，也就是说二级索引里的所有记录对于当前查询都是可见的，此时可以直接根据二级索引的deleted flag来确定记录是否应该被返回。小结一下：二级索引的MVCC可见性判断在MAX_TRX_ID失效的情况下需要依赖聚簇索引才能完成。</code></pre><h5 id="6-purge"><a href="#6-purge" class="headerlink" title="6. purge"></a>6. purge</h5><p><a href="https://developer.aliyun.com/article/646471">https://developer.aliyun.com/article/646471</a></p><pre><code>从前面的分析可以看出，为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下老记录的deleted_bit，并不真正将过时的记录删除。为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。为了不影响MVCC的正常工作，purge线程自己也维护了一个read view（这个read view相当于系统中最老活跃事务的read view）如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。由于Undo log会保留直到事务提交同时没有其他快照读引用后才会purge。所以需要尽量避免长语句或长事务的执行，避免因此导致的undo堆积或者undo链太长使读取变慢。 </code></pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://mysql.taobao.org/monthly/2018/11/04/">MySQL · 引擎特性 · InnoDB MVCC 相关实现</a> </p><p><a href="https://www.cnblogs.com/stevenczp/p/8018986.html">MySQL InnoDB MVCC深度分析</a></p><p><a href="https://developer.aliyun.com/article/646471">MySQL Innodb Purge简介</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mysql-mvcc&quot;&gt;&lt;a href=&quot;#mysql-mvcc&quot; class=&quot;headerlink&quot; title=&quot;mysql mvcc&quot;&gt;&lt;/a&gt;mysql mvcc&lt;/h1&gt;&lt;p&gt;MVCC(Multi Version Concurrency Control的简称)，代表多版本并发控制。与MVCC相对的，是基于锁的并发控制，Lock-Based Concurrency Control)。&lt;br&gt;MVCC最大的优势：读不加锁，读写不冲突。在读多写少的OLTP应用中，读写不冲突是非常重要的，极大的增加了系统的并发性能&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql-online-DDL</title>
    <link href="https://yangjiahao106.github.io/2020/11/29/mysql-online-DDL/"/>
    <id>https://yangjiahao106.github.io/2020/11/29/mysql-online-DDL/</id>
    <published>2020-11-29T14:00:39.000Z</published>
    <updated>2021-02-21T08:28:05.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-在线DDL-操作"><a href="#mysql-在线DDL-操作" class="headerlink" title="mysql 在线DDL 操作"></a>mysql 在线DDL 操作</h1><p>SQL 语句主要可以划分为以下 3 个类别。</p><ul><li><p><strong>DDL（Data Definition Languages）</strong> 语句：数据定义语言，这些语句定义了不同的数据段、数据库、表、列、索引等数据库对象的定义。常用的语句关键字主要包括 create、drop、alter等。</p></li><li><p><strong>DML（Data Manipulation Language）</strong>  语句：数据操纵语句，用于添加、删除、更新和查询数据库记录，并检查数据完整性，常用的语句关键字主要包括 insert、delete、udpate 和select 等。(增添改查）</p></li><li><p><strong>DCL（Data Control Language）</strong>  语句：数据控制语句，用于控制不同数据段直接的许可和访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语句关键字包括 grant、revoke 等。</p></li></ul><hr><p><strong>Online DDL</strong> 操作，MySQL5.6以上支持，相较于一般DDL，它在实现修改表结构的同时，依然允许DML操作（SELECT,INSERT,UPDATE,DELETE）。</p><p>Onlne DDL 具体过程为 </p><ol><li><p>拿到MDL（metadata lock） 写锁; </p></li><li><p>降级为MDL 读锁； </p></li><li><p>做真正的DDL; </p></li><li><p>升级为MDL写锁；</p></li><li><p>释放MDL 锁</p><font color=red></li></ol><ul><li>这里需要注意<br>alter table 前判断是否有未提交的事务， 或者增加超时时间，<br>如果有未提交的事务会出现Waiting for table metadata lock， 导致对表的任何操作都无法执行（包括读），如果是生产环境会造成灾难性的后果<br>。可以通过设置，超时时间来避免这种问题</font></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name NOWAIT <span class="keyword">add</span> <span class="keyword">column</span> ...</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name WAIT N <span class="keyword">add</span> <span class="keyword">column</span> ...</span><br></pre></td></tr></table></figure><p>Online DDL主要有两种方式：IN PLACE和COPY。</p><p>IN PLACE：直接在原表上进行修改，相比于COPY方式可以避免重建表带来的IO和CPU消耗，有更好的性能并支持并发DML操作<br>COPY：创建修改后的临时表，然后将原表的数据复制到临时表，执行期间不允许并发DML写操作，否则会导致脏数据。<br>在MySQL之前，我们一般使用COPY的方式，借助临时表，手动修改。</p><p>需要注意的是：并不是所有的Online DDL操作都支持IN PLACE方式。</p><h2 id="MySQL-InnoDB数据存储方式"><a href="#MySQL-InnoDB数据存储方式" class="headerlink" title="MySQL InnoDB数据存储方式"></a>MySQL InnoDB数据存储方式</h2><p>在MySQL中，一张表的数据分为两种，一种是结构数据，记录者站表包含哪些字段，哪些数据类型，另一种是记录数据，保存每天记录的原始数据。它们是用不同的文件进行存储的。</p><blockquote><p>在mysql指定的data_dir数据存储目录可以看到每张表对应一个<strong>frm</strong>文件，这个文件就是存放着表的结构数据。</p></blockquote><h2 id="1-索引操作"><a href="#1-索引操作" class="headerlink" title="1.索引操作"></a>1.索引操作</h2><table><thead><tr><th>Operation</th><th>In Place</th><th>Rebuilds Table</th><th>Permits Concurrent DML</th><th>Only Modifies Metadata</th></tr></thead><tbody><tr><td>Creating or adding a secondary index</td><td>Yes</td><td>No</td><td>Yes</td><td>No</td></tr><tr><td>Dropping an index</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>Adding a FULLTEXT index</td><td>Yes*</td><td>No*</td><td>No</td><td>No</td></tr><tr><td>Changing the index type</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr></tbody></table><h3 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX name <span class="keyword">ON</span> <span class="keyword">table</span> (col_list);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> INDEX name (col_list);</span><br></pre></td></tr></table></figure><p>当创建索引的时候数据依旧可以读写， 创建索引会等待在当前表相关的所有事务结束后才会完成， 所以索引会反映表里的最新的内容。</p><p>新创建的二级索引只会包含已经提交的数据，不会包含未提交的和旧版本的数据或者已经被标记需要删除的数据。</p><p>当创建索引时如果服务退出了，MySQL在恢复之后会丢弃未完成的索引，所以需要重新执行操作。</p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX name <span class="keyword">ON</span> <span class="keyword">table</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> INDEX name;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-主键操作"><a href="#2-主键操作" class="headerlink" title="2. 主键操作"></a>2. 主键操作</h2><h2 id="添加主键"><a href="#添加主键" class="headerlink" title="添加主键"></a>添加主键</h2><table><thead><tr><th>Operation</th><th>In Place</th><th>Rebuilds Table</th><th>Permits Concurrent DML</th><th>Only Modifies Metadata</th></tr></thead><tbody><tr><td>Adding a primary key</td><td>Yes*</td><td>Yes*</td><td>Yes</td><td>No</td></tr><tr><td>Dropping a primary key</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>Dropping a primary key and adding another</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (<span class="keyword">column</span>), ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><p>会在重建表，数据会被重新组织，这是一个成本很高的操作，<br>重建聚簇索引需要拷贝表里的数据所以最好在创建表的时候定义好主键</p><p>如果创建表的时候没加主键，mysql 会自动选择 一个 uniqu 且not null 的索引 作为主键，或者系统自动生成一个隐藏的主键</p><p>由于数据的存储是根据聚簇索引组织的，即使ALGORITHM=INPLACE 数据依旧会被拷贝</p><h3 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY, ALGORITHM<span class="operator">=</span><span class="keyword">COPY</span>;</span><br></pre></td></tr></table></figure><h3 id="替换主键"><a href="#替换主键" class="headerlink" title="替换主键"></a>替换主键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY, <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (<span class="keyword">column</span>), ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><h2 id="3-列操作"><a href="#3-列操作" class="headerlink" title="3. 列操作"></a>3. 列操作</h2><table><thead><tr><th>Operation</th><th>In Place</th><th>Rebuilds Table</th><th>Permits Concurrent DML</th><th>Only Modifies Metadata</th></tr></thead><tbody><tr><td>Adding a column</td><td>Yes</td><td>Yes</td><td>Yes*</td><td>No</td></tr><tr><td>Dropping a column</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Renaming a column</td><td>Yes</td><td>No</td><td>Yes*</td><td>Yes</td></tr><tr><td>Reordering columns</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Setting a column default value</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>Changing the column data type</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>Dropping the column default value</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>Changing the auto-increment value</td><td>Yes</td><td>No</td><td>Yes</td><td>No*</td></tr><tr><td>Making a column NULL</td><td>Yes</td><td>Yes*</td><td>Yes</td><td>No</td></tr><tr><td>Making a column NOT NULL</td><td>Yes*</td><td>Yes*</td><td>Yes</td><td>No</td></tr><tr><td>Modifying the definition of an ENUM or SET column</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr></tbody></table><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> column_name column_definition, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> column_name, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><h3 id="重命名列"><a href="#重命名列" class="headerlink" title="重命名列"></a>重命名列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl CHANGE old_col_name new_col_name data_type, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><h3 id="调整列顺序"><a href="#调整列顺序" class="headerlink" title="调整列顺序"></a>调整列顺序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name MODIFY <span class="keyword">COLUMN</span> col_name column_definition <span class="keyword">FIRST</span>, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><p><strong>注意： 数据会被重新组织,成本较高</strong></p><h3 id="修改类型"><a href="#修改类型" class="headerlink" title="修改类型"></a>修改类型</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name CHANGE c1 c1 <span class="type">BIGINT</span>, ALGORITHM<span class="operator">=</span><span class="keyword">COPY</span>;</span><br></pre></td></tr></table></figure><p>仅支持  ALGORITHM=COPY.</p><h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> col <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> literal, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><h3 id="删除默认值"><a href="#删除默认值" class="headerlink" title="删除默认值"></a>删除默认值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> col <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br><span class="line">C</span><br></pre></td></tr></table></figure><h3 id="修改auto-increment"><a href="#修改auto-increment" class="headerlink" title="修改auto-increment"></a>修改auto-increment</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">table</span> AUTO_INCREMENT<span class="operator">=</span>next_value, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><h3 id="设置列可以为NULL"><a href="#设置列可以为NULL" class="headerlink" title="设置列可以为NULL"></a>设置列可以为NULL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name MODIFY <span class="keyword">COLUMN</span> column_name data_type <span class="keyword">NULL</span>, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><h3 id="设置列不可以为NULL"><a href="#设置列不可以为NULL" class="headerlink" title="设置列不可以为NULL"></a>设置列不可以为NULL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name MODIFY <span class="keyword">COLUMN</span> column_name data_type <span class="keyword">NOT</span> <span class="keyword">NULL</span>, ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><p>如果有值为NULL此操作会失败<br><strong>STRICT_ALL_TABLES or STRICT_TRANS_TABLES SQL_MODE is required for the operation to succeed</strong></p><h3 id="修改-ENUM-或-SET-定义"><a href="#修改-ENUM-或-SET-定义" class="headerlink" title="修改 ENUM 或 SET 定义"></a>修改 ENUM 或 SET 定义</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (c1 ENUM(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>));</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t1 MODIFY <span class="keyword">COLUMN</span> c1 ENUM(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>), ALGORITHM<span class="operator">=</span>INPLACE, LOCK<span class="operator">=</span><span class="keyword">NONE</span>;</span><br></pre></td></tr></table></figure><h2 id="4-外键操作"><a href="#4-外键操作" class="headerlink" title="4.外键操作"></a>4.外键操作</h2><table><thead><tr><th>Operation</th><th>In Place</th><th>Rebuilds Table</th><th>Permits Concurrent DML</th><th>Only Modifies Metadata</th></tr></thead><tbody><tr><td>Adding a foreign key constraint</td><td>Yes*</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>Dropping a foreign key constraint</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr></tbody></table><h3 id="添加外键"><a href="#添加外键" class="headerlink" title="添加外键"></a>添加外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl1 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_name <span class="keyword">FOREIGN</span> KEY index (col1)</span><br><span class="line">  <span class="keyword">REFERENCES</span> tbl2(col2) referential_actions;</span><br></pre></td></tr></table></figure><h3 id="删除外键"><a href="#删除外键" class="headerlink" title="删除外键"></a>删除外键</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_name;</span><br></pre></td></tr></table></figure><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><table><thead><tr><th>Operation</th><th>In Place</th><th>Rebuilds Table</th><th>Permits Concurrent DML</th><th>Only Modifies Metadata</th></tr></thead><tbody><tr><td>Changing the ROW_FORMAT</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Changing the KEY_BLOCK_SIZE</td><td>Yes</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Setting persistent table statistics</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>Specifying a character set</td><td>Yes</td><td>Yes*</td><td>No</td><td>No</td></tr><tr><td>Converting a character set</td><td>No</td><td>Yes</td><td>No</td><td>No</td></tr><tr><td>Optimizing a table</td><td>Yes*</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Rebuilding with the FORCE option</td><td>Yes*</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Performing a null rebuild</td><td>Yes*</td><td>Yes</td><td>Yes</td><td>No</td></tr><tr><td>Renaming a table</td><td>Yes</td><td>No</td><td>Yes</td><td>Yes</td></tr></tbody></table><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://dev.mysql.com/doc/refman/5.6/en/innodb-online-ddl-operations.html#online-ddl-index-operations">https://dev.mysql.com/doc/refman/5.6/en/innodb-online-ddl-operations.html#online-ddl-index-operations</a></p><p><a href="https://www.cnblogs.com/youyoui/p/9545621.html">https://www.cnblogs.com/youyoui/p/9545621.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mysql-在线DDL-操作&quot;&gt;&lt;a href=&quot;#mysql-在线DDL-操作&quot; class=&quot;headerlink&quot; title=&quot;mysql 在线DDL 操作&quot;&gt;&lt;/a&gt;mysql 在线DDL 操作&lt;/h1&gt;&lt;p&gt;SQL 语句主要可以划分为以下 3 个类别。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>将Git的分支名称添加到提交消息中</title>
    <link href="https://yangjiahao106.github.io/2020/07/27/%E5%B0%86Git%E7%9A%84%E5%88%86%E6%94%AF%E5%90%8D%E7%A7%B0%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%8F%90%E4%BA%A4%E6%B6%88%E6%81%AF%E4%B8%AD/"/>
    <id>https://yangjiahao106.github.io/2020/07/27/%E5%B0%86Git%E7%9A%84%E5%88%86%E6%94%AF%E5%90%8D%E7%A7%B0%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%8F%90%E4%BA%A4%E6%B6%88%E6%81%AF%E4%B8%AD/</id>
    <published>2020-07-26T17:07:43.000Z</published>
    <updated>2022-10-23T06:15:18.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li>在 .git/hooks 目录下创建 prepare-commit-msg文件，并将下面的脚本放入文件中，</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># This way you can customize which branches should be skipped when</span></span><br><span class="line"><span class="comment"># prepending commit message. </span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$BRANCHES_TO_SKIP</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  BRANCHES_TO_SKIP=(master develop <span class="built_in">test</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">BRANCH_NAME=$(git symbolic-ref --short HEAD)</span><br><span class="line"><span class="comment">#BRANCH_NAME=&quot;$&#123;BRANCH_NAME##*/&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">BRANCH_EXCLUDED=$(<span class="built_in">printf</span> <span class="string">&quot;%s\n&quot;</span> <span class="string">&quot;<span class="variable">$&#123;BRANCHES_TO_SKIP[@]&#125;</span>&quot;</span> | grep -c <span class="string">&quot;^$BRANCH_NAME$&quot;</span>)</span><br><span class="line">BRANCH_IN_COMMIT=$(grep -c <span class="string">&quot;\[<span class="variable">$BRANCH_NAME</span>\]&quot;</span> <span class="variable">$1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$BRANCH_NAME</span>&quot;</span> ] &amp;&amp; ! [[ <span class="variable">$BRANCH_EXCLUDED</span> -eq 1 ]] &amp;&amp; ! [[ <span class="variable">$BRANCH_IN_COMMIT</span> -ge 1 ]]; <span class="keyword">then</span></span><br><span class="line">  sed -i.bak -e <span class="string">&quot;1s|^|[<span class="variable">$BRANCH_NAME</span>] |&quot;</span> <span class="variable">$1</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><ul><li>为文件添加可执行权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 prepare-commit-msg</span><br></pre></td></tr></table></figure><p>完成之后分支名就会出现在提交信息里了, 例如：</p><pre><code>Date:   Mon Oct 10 15:00:47 2022 +0800    [feature/cms]  fix bug</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;实现方法&quot;&gt;&lt;a href=&quot;#实现方法&quot; class=&quot;headerlink&quot; title=&quot;实现方法&quot;&gt;&lt;/a&gt;实现方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在 .git/hooks 目录下创建 prepare-commit-msg文件，并将下面的脚本放入文件中，&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://yangjiahao106.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>mysqlbinlog 的常用参数， 记一次回滚操作</title>
    <link href="https://yangjiahao106.github.io/2020/07/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9B%9E%E6%BB%9A%E6%93%8D%E4%BD%9C/"/>
    <id>https://yangjiahao106.github.io/2020/07/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9B%9E%E6%BB%9A%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-26T17:07:43.000Z</published>
    <updated>2021-02-28T05:06:36.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysqlbinlog-的常用参数，-记一次回滚操作"><a href="#mysqlbinlog-的常用参数，-记一次回滚操作" class="headerlink" title="mysqlbinlog 的常用参数， 记一次回滚操作"></a>mysqlbinlog 的常用参数， 记一次回滚操作</h1><p><a href="https://dev.mysql.com/doc/refman/8.0/en/mysqlbinlog.html">mysqkbinlog 官方文档</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><ol><li>不要查看当前正在写入的binlog文件</li><li>不要加–force参数强制访问</li><li>如果binlog格式是行模式的,请加 -vv参数</li></ol><h3 id="输出示例"><a href="#输出示例" class="headerlink" title="输出示例"></a>输出示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># at 141</span><br><span class="line">#200309  9:28:36 server id 123  end_log_pos 245 Query thread_id&#x3D;3350  exec_time&#x3D;11  error_code&#x3D;0</span><br></pre></td></tr></table></figure><p>第一行 at 表示此事件在 二进制日志文件中的偏移量(position)<br>第二行 开头是时间的开始时间(前两位表示年份),紧接着是事件的server id， endlog_postion 表示下一个事件的position即当前事件结束的position+1， thread_id 表示哪个线程执行的该事件，exec_time 表示事件花费的时间(在从服务器上此时间表示从服务器上的结束执行时间减去主服务器上的开始执行时间，从而可以看出复制的滞后时间)， error_codo 是错误码0代表成功。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th>参数</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>–base64-output</td><td>[ AUTO, NEVER,DECODE-ROWS], DECODE-ROWS 指定要将行事件解码并显示为注释的SQL语句通过，需要指定—v选项。同时隐藏了BINLOG语句.</td><td>DECODE-ROWS</td></tr><tr><td>–database</td><td>数据库</td><td></td></tr><tr><td>–offset</td><td>偏移量</td><td></td></tr><tr><td>–start-datetime</td><td>开始时间</td><td></td></tr><tr><td>–stop-datetime</td><td>结束时间</td><td></td></tr><tr><td>–start-position</td><td>postion 起始位置</td><td></td></tr><tr><td>–stop-position</td><td>positon 结束位置</td><td></td></tr><tr><td>–verbose, -v</td><td>构建sql语句</td><td></td></tr></tbody></table><h2 id="记录一次误删除的回滚"><a href="#记录一次误删除的回滚" class="headerlink" title="记录一次误删除的回滚"></a>记录一次误删除的回滚</h2><p>在测试服务器上删除数据的时候，where条件有误，删除了一些重要的数据，由于开启了binlog 并且是ROW模式所以想到了使用mysqlbinlog 找出被删除的数据，并重新插入</p><p>show variables like ‘log_bin’; 查看binlog 是否开启</p><p>show variables like ‘log_%’; 查看binlog 日志文件位置</p><h3 id="1-第一步将最新的binlog日志拷贝出来，通过mysqlbinlog工具将最近时间段的事件导出，"><a href="#1-第一步将最新的binlog日志拷贝出来，通过mysqlbinlog工具将最近时间段的事件导出，" class="headerlink" title="1.第一步将最新的binlog日志拷贝出来，通过mysqlbinlog工具将最近时间段的事件导出，"></a>1.第一步将最新的binlog日志拷贝出来，通过mysqlbinlog工具将最近时间段的事件导出，</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysqlbinlog  --base64-output=DECODE-ROWS -v  --start-datetime=<span class="string">&#x27;2020-07-22 15:30:00&#x27;</span> --stop-datetime=<span class="string">&#x27;2020-07-22 15:48:00&#x27;</span> --database=<span class="string">&#x27;gemini_base&#x27;</span> --start-position=749811837   mysql-bin.000047 &gt;&gt; binlog_output.sql</span><br></pre></td></tr></table></figure><h3 id="2-使用grep-过滤出执行误删除操作的事件"><a href="#2-使用grep-过滤出执行误删除操作的事件" class="headerlink" title="2.使用grep 过滤出执行误删除操作的事件"></a>2.使用grep 过滤出执行误删除操作的事件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -A21 <span class="string">&quot;DELETE FROM \`gemini_order`.`order_base`&quot;</span> | grep <span class="string">&quot;@&quot;</span> &gt;&gt; row_value</span><br></pre></td></tr></table></figure><h3 id="3-使用正则将提取出值并转成-insert-语句，插入即可"><a href="#3-使用正则将提取出值并转成-insert-语句，插入即可" class="headerlink" title="3. 使用正则将提取出值并转成 insert 语句，插入即可"></a>3. 使用正则将提取出值并转成 insert 语句，插入即可</h3>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mysqlbinlog-的常用参数，-记一次回滚操作&quot;&gt;&lt;a href=&quot;#mysqlbinlog-的常用参数，-记一次回滚操作&quot; class=&quot;headerlink&quot; title=&quot;mysqlbinlog 的常用参数， 记一次回滚操作&quot;&gt;&lt;/a&gt;mysqlbinlog 的常用参数， 记一次回滚操作&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/mysqlbinlog.html&quot;&gt;mysqkbinlog 官方文档&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql 锁的分类</title>
    <link href="https://yangjiahao106.github.io/2020/05/25/mysql%E9%94%81/"/>
    <id>https://yangjiahao106.github.io/2020/05/25/mysql%E9%94%81/</id>
    <published>2020-05-25T12:22:49.000Z</published>
    <updated>2021-02-21T08:28:05.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加锁机制分类："><a href="#加锁机制分类：" class="headerlink" title="加锁机制分类："></a>加锁机制分类：</h1><p><img src="736A25C1A8C64EB7BDBC2D4D1577E1CE" alt="image"></p><h2 id="1、乐观锁：先修改，保存时判断是够被更新过，应用级别"><a href="#1、乐观锁：先修改，保存时判断是够被更新过，应用级别" class="headerlink" title="1、乐观锁：先修改，保存时判断是够被更新过，应用级别"></a>1、乐观锁：先修改，保存时判断是够被更新过，应用级别</h2><p>乐观锁不是数据库自带的，需要我们自己去实现。乐观锁是指操作数据库时(更新操作)，想法很乐观，认为这次的操作不会导致冲突，在操作数据时，并不进行任何其他的特殊处理（也就是不加锁），而在进行更新后，再去判断是否有冲突了。</p><h3 id="1-1通过-version-实现："><a href="#1-1通过-version-实现：" class="headerlink" title="1.1通过 version 实现："></a>1.1通过 version 实现：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 使用version 实现乐观锁</span><br><span class="line"></span><br><span class="line">--1.查询出商品信息</span><br><span class="line"></span><br><span class="line">select (status,status,version) from t_goods where id&#x3D;#&#123;id&#125;</span><br><span class="line"></span><br><span class="line">--2.根据商品信息生成订单</span><br><span class="line"></span><br><span class="line">--3.修改商品status为2</span><br><span class="line"></span><br><span class="line">update t_goods </span><br><span class="line"></span><br><span class="line">set status&#x3D;2,version&#x3D;version+1</span><br><span class="line"></span><br><span class="line">where id&#x3D;#&#123;id&#125; and version&#x3D;#&#123;version&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-通过-CAS算法-实现"><a href="#1-2-通过-CAS算法-实现" class="headerlink" title="1.2. 通过 CAS算法 实现"></a>1.2. 通过 CAS算法 实现</h3><p>即compare and swap（比较与交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（Non-blocking Synchronization）。CAS算法涉及到三个操作数</p><p>需要读写的内存值 V<br>进行比较的值 A<br>拟写入的新值 B</p><p>当且仅当 V 的值等于 A时，CAS通过原子方式用新值B来更新V的值，否则不会执行任何操作（比较和替换是一个原子操作）。一般情况下是一个自旋操作，即不断的重试。</p><p>乐观锁的缺点 <strong>todo</strong> </p><p>作者：Guide哥<br>链接：<a href="https://juejin.im/post/5b4977ae5188251b146b2fc8">https://juejin.im/post/5b4977ae5188251b146b2fc8</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="2、悲观锁：先获取锁，再操作修改，数据库级别，-比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁"><a href="#2、悲观锁：先获取锁，再操作修改，数据库级别，-比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁" class="headerlink" title="2、悲观锁：先获取锁，再操作修改，数据库级别， 比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁"></a>2、悲观锁：先获取锁，再操作修改，数据库级别， 比如<strong>行锁，表锁等，读锁，写锁</strong>等，都是在做操作之前先上锁</h2><h3 id="2-1-共享锁"><a href="#2-1-共享锁" class="headerlink" title="2.1. 共享锁"></a>2.1. 共享锁</h3><p>又称之为读锁，简称S锁，当事务对数据加上读锁后，其他事务只能对该数据加读锁，不能做任何修改操作，也就是不能添加写锁。只有当数据上的读锁被释放后，其他事务才能对其添加写锁。共享锁主要是为了支持并发的读取数据而出现的，读取数据时，不允许其他事务对当前数据进行修改操作，从而避免”不可重读”的问题的出现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> city <span class="keyword">where</span> id <span class="operator">=</span> &quot;1&quot;  lock <span class="keyword">in</span> share mode; </span><br></pre></td></tr></table></figure><h3 id="2-2-排它锁"><a href="#2-2-排它锁" class="headerlink" title="2.2 排它锁"></a>2.2 排它锁</h3><p>又称之为写锁，简称X锁，当事务对数据加上写锁后，其他事务既不能对该数据添加读写，也不能对该数据添加写锁，写锁与其他锁都是互斥的。只有当前数据写锁被释放后，其他事务才能对其添加写锁或者是读锁。写锁主要是为了解决在修改数据时，不允许其他事务对当前数据进行修改和读取操作，从而可以有效避免”脏读”问题的产生。</p><p>当我们使用sql语句做查询操作，**<u>命中索引则添加行锁**</u>，此时，共享指定行；**<u>没有命中索引则添加表锁</u>**，则共享整张表。通过上图我们知道，共享锁只能兼容共享锁，不兼容排它锁，并且，排它锁互斥共享锁和其它排它锁。我们在数据库操作一遍试试看：<br>update,insert,delete语句会自动加排它锁的原因， select for update 也会加排它锁</p><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;加锁机制分类：&quot;&gt;&lt;a href=&quot;#加锁机制分类：&quot; class=&quot;headerlink&quot; title=&quot;加锁机制分类：&quot;&gt;&lt;/a&gt;加锁机制分类：&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;736A25C1A8C64EB7BDBC2D4D1577E1CE&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql批量更新的几种方法.md</title>
    <link href="https://yangjiahao106.github.io/2019/11/01/mysql-batch-update-md/"/>
    <id>https://yangjiahao106.github.io/2019/11/01/mysql-batch-update-md/</id>
    <published>2019-11-01T15:18:17.000Z</published>
    <updated>2021-02-21T08:28:05.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-批量update"><a href="#mysql-批量update" class="headerlink" title="mysql 批量update"></a>mysql 批量update</h1><p>创建初始数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `fruit` (</span><br><span class="line">    id <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    fruit_name <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入初始数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> `fruit` (`id`, `fruit_name`)</span><br><span class="line">    <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>,<span class="string">&#x27;apple&#x27;</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;orange&#x27;</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;peach&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法一：-使用on-duplicate-key-update-推荐"><a href="#方法一：-使用on-duplicate-key-update-推荐" class="headerlink" title="方法一： 使用on duplicate key update ==推荐=="></a>方法一： 使用on duplicate key update ==推荐==</h2><p>注意 1:插入的值中必须含有一列有唯一索引的列，比如id<br>2：其他的列必须有默认值</p><p>当主键或唯一索引重复时更新数据，否则插入新数据，不需要维护索引，效率很高更新一张十几万条数据的表只需几秒到十几秒。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> `fruit` (`id`, `fruit_name`)</span><br><span class="line">    <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;grape&#x27;</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;banana&#x27;</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;strawbe&#x27;</span>)</span><br><span class="line">    <span class="keyword">ON</span> DUPLICATE KEY UPDATE `fruit_name` <span class="operator">=</span> <span class="keyword">VALUES</span>(`fruit_name`);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法二-case-when"><a href="#方法二-case-when" class="headerlink" title="方法二 case when"></a>方法二 case when</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE fruit</span><br><span class="line"><span class="keyword">SET</span> fruit_name <span class="operator">=</span> (<span class="keyword">CASE</span> id <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="string">&#x27;grape&#x27;</span></span><br><span class="line">                 <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="string">&#x27;banana&#x27;</span></span><br><span class="line">                 <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="string">&#x27;strawberry&#x27;</span></span><br><span class="line">         <span class="keyword">END</span>)</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">IN</span>(<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法三-创建临时表"><a href="#方法三-创建临时表" class="headerlink" title="方法三 创建临时表"></a>方法三 创建临时表</h2><p>创建临时表，联结临时表和需要更新的表，更新之后删除临时表<br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 示例：</span></span><br><span class="line"></span><br><span class="line">update table1, table2 <span class="keyword">set</span> table1.fruit_name <span class="operator">=</span> table2.fruit_name <span class="keyword">where</span> table1.id <span class="operator">=</span> table2.id;</span><br></pre></td></tr></table></figure><h1 id="方法四：replace-into"><a href="#方法四：replace-into" class="headerlink" title="方法四：replace into"></a>方法四：replace into</h1><p>当主键或唯一索引重复时删除旧的数据并插入新的数据，需要维护索引效率较慢</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replace <span class="keyword">into</span> fruit (id,fruit_name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;grape&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;banana&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;strawberry&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mysql-批量update&quot;&gt;&lt;a href=&quot;#mysql-批量update&quot; class=&quot;headerlink&quot; title=&quot;mysql 批量update&quot;&gt;&lt;/a&gt;mysql 批量update&lt;/h1&gt;&lt;p&gt;创建初始数据&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>ssh代理</title>
    <link href="https://yangjiahao106.github.io/2019/09/22/ssh%E4%BB%A3%E7%90%86/"/>
    <id>https://yangjiahao106.github.io/2019/09/22/ssh%E4%BB%A3%E7%90%86/</id>
    <published>2019-09-22T15:24:48.000Z</published>
    <updated>2021-02-21T08:28:05.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH代理的用法"><a href="#SSH代理的用法" class="headerlink" title="SSH代理的用法"></a>SSH代理的用法</h1><h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>例1：本地portA 转发到远程机HostB的portB端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh -N -L 0.0.0.0:PortA:HostB:PortB user@HostB</span></span><br></pre></td></tr></table></figure><p>例2：HostA 上启动一个 PortA 端口，通过 HostB 转发到 HostC:PortC上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HostA$ ssh -L 0.0.0.0:PortA:HostC:PortC  user@HostB</span><br></pre></td></tr></table></figure><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>例1：HostB主机的PostB转发到本地PortA</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># ssh -N -R HostB:PortB:0.0.0.0:PortA user@HostB</span><br><span class="line">&#96;&#96;&#96;       </span><br><span class="line"></span><br><span class="line">例2：HostA 将自己可以访问的 HostB:PortB 暴露给外网服务器 HostC:PortC，在 HostA 上运行：</span><br></pre></td></tr></table></figure><p>HostA$ ssh -R HostC:PortC:HostB:PortB  user@HostC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## sock 代理</span><br><span class="line"></span><br><span class="line">在 HostA 的本地 1080 端口启动一个 socks5 服务，通过本地 socks5 代理的数据会通过 ssh 链接先发送给 HostB，再从 HostB 转发送给远程主机：</span><br><span class="line">&#96;&#96;&#96;bash</span><br><span class="line">ssh -N -D 0.0.0.0:1080 user@HostB</span><br></pre></td></tr></table></figure><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-C 为压缩数据</span><br><span class="line">-q 安静模式</span><br><span class="line">-T 禁止远程分配终端-n 关闭标准输入</span><br><span class="line">-N 不执行远程命令</span><br><span class="line">-f 参数，把 ssh 放到后台运行。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;SSH代理的用法&quot;&gt;&lt;a href=&quot;#SSH代理的用法&quot; class=&quot;headerlink&quot; title=&quot;SSH代理的用法&quot;&gt;&lt;/a&gt;SSH代理的用法&lt;/h1&gt;&lt;h2 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerlink&quot; title=&quot;正向代理&quot;&gt;&lt;/a&gt;正向代理&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Mysql查询英文如何严格区分大小写</title>
    <link href="https://yangjiahao106.github.io/2019/08/18/Mysql%E6%9F%A5%E8%AF%A2%E8%8B%B1%E6%96%87%E5%A6%82%E4%BD%95%E4%B8%A5%E6%A0%BC%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
    <id>https://yangjiahao106.github.io/2019/08/18/Mysql%E6%9F%A5%E8%AF%A2%E8%8B%B1%E6%96%87%E5%A6%82%E4%BD%95%E4%B8%A5%E6%A0%BC%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/</id>
    <published>2019-08-18T15:24:30.000Z</published>
    <updated>2021-02-21T08:28:05.972Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql查询英文如何严格区分大小写？"><a href="#Mysql查询英文如何严格区分大小写？" class="headerlink" title="Mysql查询英文如何严格区分大小写？"></a>Mysql查询英文如何严格区分大小写？</h1><p>MySQL 在查询英文时默认是不区分大小写的，比如下面这两个SQL的效果是一模一样的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;TOM&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果想要严格区分大小写改怎么做呢？</p><h2 id="方法一：-修改collate"><a href="#方法一：-修改collate" class="headerlink" title="方法一： 修改collate"></a>方法一： 修改collate</h2><p>collate是指字符检索策略，可以参考这篇博客： <a href="https://juejin.im/post/5bfe5cc36fb9a04a082161c2">https://juejin.im/post/5bfe5cc36fb9a04a082161c2</a> </p><p>Mysql默认的字符检索策略：utf8mb4_general_ci，ci是case insensitive的缩写表示不区分大小写，utf8mb4_bin表示二进制比较可以区分大小写。</p><h3 id="创建数据库时指定collate"><a href="#创建数据库时指定collate" class="headerlink" title="创建数据库时指定collate"></a>创建数据库时指定collate</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>db_name<span class="operator">&gt;</span> <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新库的collate</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="operator">&lt;</span>database_name<span class="operator">&gt;</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在创建表的时候指定collate-为utf8-bin"><a href="#在创建表的时候指定collate-为utf8-bin" class="headerlink" title="在创建表的时候指定collate 为utf8_bin"></a>在创建表的时候指定collate 为utf8_bin</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB <span class="keyword">COLLATE</span> <span class="operator">=</span>utf8mb4_bin;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新表的collate</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br></pre></td></tr></table></figure><h3 id="也可以创建表的时候设置列级别的collate，指定单个列的collate"><a href="#也可以创建表的时候设置列级别的collate，指定单个列的collate" class="headerlink" title="也可以创建表的时候设置列级别的collate，指定单个列的collate"></a>也可以创建表的时候设置列级别的collate，指定单个列的collate</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name VVARCHAR（<span class="number">64</span>） <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>更新列的collate</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>table_name<span class="operator">&gt;</span> MODIFY <span class="operator">&lt;</span>column_name<span class="operator">&gt;</span> <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法二：-修改sql"><a href="#方法二：-修改sql" class="headerlink" title="方法二： 修改sql"></a>方法二： 修改sql</h2><p>在写SQL的时候加上关键字BINARY进行二进制比较比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class <span class="keyword">WHERE</span> <span class="type">BINARY</span> name<span class="operator">=</span><span class="string">&#x27;TOM&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> class <span class="keyword">WHERE</span> <span class="type">BINARY</span> name<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Mysql查询英文如何严格区分大小写？&quot;&gt;&lt;a href=&quot;#Mysql查询英文如何严格区分大小写？&quot; class=&quot;headerlink&quot; title=&quot;Mysql查询英文如何严格区分大小写？&quot;&gt;&lt;/a&gt;Mysql查询英文如何严格区分大小写？&lt;/h1&gt;&lt;p&gt;MySQL 在查询英文时默认是不区分大小写的，比如下面这两个SQL的效果是一模一样的。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>git reset revert checkout的区别</title>
    <link href="https://yangjiahao106.github.io/2019/08/18/git%20reset,%20revert,%20checkout/"/>
    <id>https://yangjiahao106.github.io/2019/08/18/git%20reset,%20revert,%20checkout/</id>
    <published>2019-08-18T08:58:40.000Z</published>
    <updated>2021-02-28T06:09:19.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-reset-revert-checkout"><a href="#git-reset-revert-checkout" class="headerlink" title="git reset, revert, checkout"></a>git reset, revert, checkout</h1><h2 id="Git-Reset"><a href="#Git-Reset" class="headerlink" title="Git Reset"></a><a href="https://git-scm.com/docs/git-reset">Git Reset</a></h2><p>git reset [<mode>][<commit>]</p><p>将current branch head(HEAD) 指向 <commit>, git reset命令是用来将当前branch重置到另外一个commit的，而这个动作可能会将index以及work tree同样影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--soft  修改 HEAD, Index 和 Working tree 不变 </span><br><span class="line">--mixed 修改 HEAD, 还原Index, Working tree 不变</span><br><span class="line">--hard  修改 HEAD, 还原Index 和 Working Tree, &lt;commit&gt; 之后的修改都会被丢弃</span><br></pre></td></tr></table></figure><ul><li>reset 回退之后后悔了怎么办？ 使用git reflog 查看reset 操作之前所在commit的id，使用reset –hard <commit_id> 即可撤销reset操作。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">           HEAD (refers to branch &#39;master&#39;)</span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">a---b---c  branch &#39;master&#39; (refers to commit &#39;c&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ git reset HEAD^</span><br><span class="line"></span><br><span class="line">           HEAD (refers to branch &#39;master&#39;)</span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">  branch &#39;master&#39; (refers to commit &#39;c&#39;)</span><br><span class="line">    |</span><br><span class="line">    v</span><br><span class="line">a---b---c</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Git-Revert"><a href="#Git-Revert" class="headerlink" title="Git Revert"></a><a href="https://git-scm.com/docs/git-revert">Git Revert</a></h2><p>撤销一次提交的修改，并创建一个新的提交来记录</p><ul><li>revert 是撤销一次提交，所以后面的commit id是你要撤销的commitID 不是撤销到该commit，比如Git revet HEAD 撤销最近的提交，Git reset HEAD 没有变化。</li><li> 使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的</li><li> 使用revert HEAD~1 表示撤销最近第二2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">           HEAD (refers to branch &#39;master&#39;)</span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">a---b---c  branch &#39;master&#39; (refers to commit &#39;c&#39;)</span><br><span class="line"></span><br><span class="line">$ git revert HEAD</span><br><span class="line"></span><br><span class="line">                       HEAD (refers to commit &#39;d&#39;)</span><br><span class="line">                        |</span><br><span class="line">                        v</span><br><span class="line">a---b---c---d  branch &#39;master&#39; (refers to commit &#39;d&#39;)</span><br></pre></td></tr></table></figure><h2 id="Git-Checkout"><a href="#Git-Checkout" class="headerlink" title="Git Checkout"></a><a href="">Git Checkout</a></h2><p>git checkout </p><p>更新 Working tree 和 Index 或者 special tree 一致</p><p>git checkout <branch><br>切换分支 更新 HEAD Index, working tree, working tree 中的修改不变，可以提交到另一个分支。</p><p>提取某个提交中的某个文件：<br>git checkout <commit> – file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">               HEAD (refers to branch &#39;master&#39;)</span><br><span class="line">                |</span><br><span class="line">                v</span><br><span class="line">a---b---c---d  branch &#39;master&#39; (refers to commit &#39;d&#39;)</span><br><span class="line"></span><br><span class="line">$ git checkout master^^</span><br><span class="line"></span><br><span class="line">   HEAD (refers to commit &#39;b&#39;)</span><br><span class="line">    |</span><br><span class="line">    v</span><br><span class="line">a---b---c---d  branch &#39;master&#39; (refers to commit &#39;d&#39;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>分支指向的commit 目录 .git/refs/heads 下的文件记录了分支指向的commi.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ git:(dev) ✗ cat .git&#x2F;refs&#x2F;heads&#x2F;master</span><br><span class="line">afb8dce836d3b04e0fa93dd11eb032c7b736db55</span><br></pre></td></tr></table></figure><h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>当前活跃分支的游标，你再哪里HEAD 就在哪里，HEAD 默认指向当前分支的最后一次提交，也通过checkout 命令可以指向一个commit。git reflog 显示的就是HEAD的历史。HEAD 的本质是一个指向reference 的指针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ git:(dev) ✗ cat .git&#x2F;HEAD</span><br><span class="line">ref: refs&#x2F;heads&#x2F;dev</span><br></pre></td></tr></table></figure><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>也称为staging aera(暂存区) 是即将被下一次提交的文件集合。</p><h3 id="Working-copy"><a href="#Working-copy" class="headerlink" title="Working copy"></a>Working copy</h3><p>当前工作和子目录中的文件集合</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;git-reset-revert-checkout&quot;&gt;&lt;a href=&quot;#git-reset-revert-checkout&quot; class=&quot;headerlink&quot; title=&quot;git reset, revert, checkout&quot;&gt;&lt;/a&gt;git reset, revert, checkout&lt;/h1&gt;&lt;h2 id=&quot;Git-Reset&quot;&gt;&lt;a href=&quot;#Git-Reset&quot; class=&quot;headerlink&quot; title=&quot;Git Reset&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://git-scm.com/docs/git-reset&quot;&gt;Git Reset&lt;/a&gt;&lt;/h2&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://yangjiahao106.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>谷歌搜索技巧</title>
    <link href="https://yangjiahao106.github.io/2019/07/27/%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    <id>https://yangjiahao106.github.io/2019/07/27/%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</id>
    <published>2019-07-27T08:58:40.000Z</published>
    <updated>2021-02-21T08:28:05.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-使用标签"><a href="#1-使用标签" class="headerlink" title="1.使用标签"></a>1.使用标签</h2><p>每次搜索时你都会看到图片、视频、新闻、地图等标签，使用标签可以筛选相关的内容，帮助你更好的找到你想要的内容。</p><h2 id="2-精准搜索"><a href="#2-精准搜索" class="headerlink" title="2.精准搜索"></a>2.精准搜索</h2><p>在搜索内容上加上双引号，搜索引擎会精准的匹配引号中的整个句子。</p><h2 id="3-排除关键字"><a href="#3-排除关键字" class="headerlink" title="3.排除关键字"></a>3.排除关键字</h2><p>在搜索内容后面，比如你想搜索野马，而不是野马汽车，结果却都是一些汽车之家，爱开汽车。你可以使用</p><ul><li>野马 -车</li></ul><p>你会发现汽车之家之类的都没了，但还是没有真正的野马emmm。</p><h2 id="4-使用OR逻辑"><a href="#4-使用OR逻辑" class="headerlink" title="4.使用OR逻辑"></a>4.使用OR逻辑</h2><p>例如 </p><ul><li>张三 OR 李四 </li></ul><p>注意OR要大写</p><h2 id="5-站内搜索"><a href="#5-站内搜索" class="headerlink" title="5.站内搜索"></a>5.站内搜索</h2><p>比如像搜索知乎内的内容可以这样</p><ul><li>zhihu.com: 怎么变帅</li></ul><p>还可以这样</p><ul><li>如何变帅 site:zhihu.com</li></ul><h2 id="6-搜索一个网页链接了另一个网页"><a href="#6-搜索一个网页链接了另一个网页" class="headerlink" title="6.搜索一个网页链接了另一个网页"></a>6.搜索一个网页链接了另一个网页</h2><ul><li>link:nytimes.com</li></ul><h2 id="7-使用通配符"><a href="#7-使用通配符" class="headerlink" title="7.使用通配符*"></a>7.使用通配符*</h2><p>比如搜索一些听不清的歌词</p><ul><li>“Come * right now * me”</li></ul><h2 id="8-范围搜索"><a href="#8-范围搜索" class="headerlink" title="8.范围搜索"></a>8.范围搜索</h2><ul><li>奥运会 2008.. 2018</li></ul><p>注意两个英文逗号加一个空格</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-使用标签&quot;&gt;&lt;a href=&quot;#1-使用标签&quot; class=&quot;headerlink&quot; title=&quot;1.使用标签&quot;&gt;&lt;/a&gt;1.使用标签&lt;/h2&gt;&lt;p&gt;每次搜索时你都会看到图片、视频、新闻、地图等标签，使用标签可以筛选相关的内容，帮助你更好的找到你想要的内容。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>go匿名函数使用外部变量</title>
    <link href="https://yangjiahao106.github.io/2019/07/02/go%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    <id>https://yangjiahao106.github.io/2019/07/02/go%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F/</id>
    <published>2019-07-02T15:52:12.000Z</published>
    <updated>2021-02-28T06:09:31.082Z</updated>
    
    <content type="html"><![CDATA[<p>defer 的匿名函数中引用了外部变量a，a 的值在for循环结束最后会被设为”mouse”, 所以defer中的输出都为”mouse”</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">animals := []<span class="keyword">string</span>&#123;<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> animals&#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// mouse</span></span><br></pre></td></tr></table></figure><p>// 下面的goroutine 同样引用了外部变量a，由于下面的三个goroutine是异步的，所以输出是不缺定的，次例的输出都为mouse。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">animals := []<span class="keyword">string</span>&#123;<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> animals &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// mouse</span></span><br></pre></td></tr></table></figure><p>如果我们想要分别输出 “dog”, “cat”,”mouse” 改怎么写呢？</p><p>通过参数的传递做一次值拷贝就可以了，注意要传递值不要传递指针。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fumc main()&#123;</span><br><span class="line">animals := []<span class="keyword">string</span>&#123;<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, a := <span class="keyword">range</span> animals &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(a <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// dog</span></span><br><span class="line"><span class="comment">// mouse</span></span><br><span class="line"><span class="comment">// cat</span></span><br></pre></td></tr></table></figure><p>下面再举两个个例子，第一段代码匿名函数中的err使用的外部变量，第二段代码匿名函数中的err是内部定义的变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">_ = err</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err = fmt.Println(<span class="string">&quot;hello goroutine&quot;</span>)</span><br><span class="line">time.Sleep(time.Second*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err is not nil&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err is nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Second )</span><br><span class="line">err = errors.New(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// err is not nil</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">_ = err</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := strconv.Atoi(<span class="string">&quot;22&quot;</span>)</span><br><span class="line">time.Sleep(time.Second*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err is not nil&quot;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err is nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">time.Sleep(time.Second )</span><br><span class="line">err = errors.New(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// err is nil</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;defer 的匿名函数中引用了外部变量a，a 的值在for循环结束最后会被设为”mouse”, 所以defer中的输出都为”mouse”&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	animals := []&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;mouse&amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, a := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; animals&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// mouse&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// mouse&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// mouse&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="golang" scheme="https://yangjiahao106.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>git revert merge</title>
    <link href="https://yangjiahao106.github.io/2019/06/29/git-revert-merge/"/>
    <id>https://yangjiahao106.github.io/2019/06/29/git-revert-merge/</id>
    <published>2019-06-29T12:22:49.000Z</published>
    <updated>2021-02-28T06:09:05.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-revert-merge"><a href="#git-revert-merge" class="headerlink" title="git revert merge"></a>git revert merge</h1><p>合并代码的时候出了一些问题，想要将这次合并revert调， 结果出错了</p><pre><code>error: commit 9002453bd778790d03022d00b271f71fdb146b76 is a merge but no -m option was given.fatal: revert failed</code></pre><p>-m 是什么鬼，查看一下帮助文档</p><pre><code> -m parent-number, --mainline parent-number        Usually you cannot revert a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and       allows revert to reverse the change relative to the specified parent.       Reverting a merge commit declares that you will never want the tree changes brought in by the merge. As a result, later merges will only bring in tree changes introduced by commits that are not       ancestors of the previously reverted merge. This may or may not be what you want.       See the revert-a-faulty-merge How-To[1] for more details.</code></pre><p>原因是一次merge提交会有两个parent,我们需要指定一个parent作为主线,那么如何指定一条主线呢？如果你在A分支上合并B分支到A分支，那么1 就代表A分支，2 就代表B分支。在分支A上执行 git revert <commitID> -m 1 就将从B分支上和并过来的提交给删除了。</p><p>或者通过git log 查看一下，Merge后面第一个commit ID就是1，第二个commit ID就是2</p><pre><code>commit 9002453bd778790d03022d00b271f71fdb146b76 (HEAD -&gt; master)Merge: 7df7c3c 4b6f9c2Author: yangjh &lt;yangjh@ibaodashi.com&gt;Date:   Sat Jun 15 16:21:00 2019 +0800</code></pre><p>现在根据需求我只需要 git revert 900245 -m 1  就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;git-revert-merge&quot;&gt;&lt;a href=&quot;#git-revert-merge&quot; class=&quot;headerlink&quot; title=&quot;git revert merge&quot;&gt;&lt;/a&gt;git revert merge&lt;/h1&gt;&lt;p&gt;合并代码的时候出了一些问题，想要将这次合并revert调， 结果出错了&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="https://yangjiahao106.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>jetBrains IDE正则搜索替换高级用法</title>
    <link href="https://yangjiahao106.github.io/2019/06/29/jetBrains-IDE%E6%AD%A3%E5%88%99%E6%90%9C%E7%B4%A2%E6%9B%BF%E6%8D%A2%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
    <id>https://yangjiahao106.github.io/2019/06/29/jetBrains-IDE%E6%AD%A3%E5%88%99%E6%90%9C%E7%B4%A2%E6%9B%BF%E6%8D%A2%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</id>
    <published>2019-06-29T12:20:01.000Z</published>
    <updated>2021-02-21T08:28:05.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jetBrains-IED关于正则搜索替换的高级用法。"><a href="#jetBrains-IED关于正则搜索替换的高级用法。" class="headerlink" title="jetBrains IED关于正则搜索替换的高级用法。"></a>jetBrains IED关于正则搜索替换的高级用法。</h1><h2 id="使用正则表达式捕获分组和反向引用分组。"><a href="#使用正则表达式捕获分组和反向引用分组。" class="headerlink" title="使用正则表达式捕获分组和反向引用分组。"></a>使用正则表达式捕获分组和反向引用分组。</h2><p>当我们使用正则表达式去替换一些东西时，我们还想使用正则匹配到的一些内容中，就可以使用分组然后在替换结果中引用它。</p><h3 id="举个栗子："><a href="#举个栗子：" class="headerlink" title="举个栗子："></a>举个栗子：</h3><p>替换前：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">new</span> <span class="attr">product</span>=<span class="string">&quot;ij&quot;</span> <span class="attr">category</span>=<span class="string">&quot;105&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Multiline search and replace in the current file&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">new</span> <span class="attr">product</span>=<span class="string">&quot;ij&quot;</span> <span class="attr">category</span>=<span class="string">&quot;105&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Improved search and replace in the current file&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">new</span> <span class="attr">product</span>=<span class="string">&quot;ij&quot;</span> <span class="attr">category</span>=<span class="string">&quot;105&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Regexp shows replacement preview&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>替换后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;new product&#x3D;&quot;ij&quot; category&#x3D;&quot;105&quot;&#x2F;&gt;&lt;title&gt;Multiline search and replace in the current file&lt;&#x2F;title&gt;</span><br><span class="line">&lt;new product&#x3D;&quot;ij&quot; category&#x3D;&quot;105&quot;&#x2F;&gt;&lt;title&gt;Improved search and replace in the current file&lt;&#x2F;title&gt;</span><br><span class="line">&lt;new product&#x3D;&quot;ij&quot; category&#x3D;&quot;105&quot;&#x2F;&gt;&lt;title&gt;Regexp shows replacement preview&lt;&#x2F;title&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1-使用快捷键Ctrl-R调出替换工具栏，选择正则表达式模式"><a href="#1-使用快捷键Ctrl-R调出替换工具栏，选择正则表达式模式" class="headerlink" title="1.使用快捷键Ctrl + R调出替换工具栏，选择正则表达式模式"></a>1.使用快捷键Ctrl + R调出替换工具栏，选择正则表达式模式</h4><h4 id="2-在搜索栏内输入正则表达式："><a href="#2-在搜索栏内输入正则表达式：" class="headerlink" title="2.在搜索栏内输入正则表达式："></a>2.在搜索栏内输入正则表达式：</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\stitle=&quot;(.*)?&quot;\s*(/&gt;*)</span><br></pre></td></tr></table></figure><h4 id="3-在替换栏内输入替换结果，使用-加上数字反向引用正则中匹配的分组，如何确定分组编号有一个小技巧，就是数’-‘的个数，内容在哪个’-‘内-就是第几个分组。"><a href="#3-在替换栏内输入替换结果，使用-加上数字反向引用正则中匹配的分组，如何确定分组编号有一个小技巧，就是数’-‘的个数，内容在哪个’-‘内-就是第几个分组。" class="headerlink" title="3. 在替换栏内输入替换结果，使用$加上数字反向引用正则中匹配的分组，如何确定分组编号有一个小技巧，就是数’(‘的个数，内容在哪个’(‘内,就是第几个分组。"></a>3. 在替换栏内输入替换结果，使用$加上数字反向引用正则中匹配的分组，如何确定分组编号有一个小技巧，就是数’(‘的个数，内容在哪个’(‘内,就是第几个分组。</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$2&lt;title&gt;$1&lt;/title&gt;</span><br></pre></td></tr></table></figure><h4 id="4-点击REPLACE-All-大功告成"><a href="#4-点击REPLACE-All-大功告成" class="headerlink" title="4. 点击REPLACE All 大功告成"></a>4. 点击REPLACE All 大功告成</h4><h2 id="转换字符大小写"><a href="#转换字符大小写" class="headerlink" title="转换字符大小写"></a>转换字符大小写</h2><pre><code>语法也很简单，一共有四种：\l changes a character to lowercase until the next character in the string. For example, Bar becomes bar.\u changes a character to uppercase until the next character in the string. For example, bar becomes Bar.\L changes characters to lowercase until the end of the literal string (\E). For example, BAR becomes bar.\U changes characters to uppercase until the end of the literal string (\E). For example, bar becomes BAR.翻译过来就是：\l 首字母变小型，例如 Bar -&gt; bar\u 首字母变大小，例如 bar -&gt; Bar\L 字符串变小写，例如 BAR -&gt; bar\U 字符串变大写，例如 bar -&gt; BAR</code></pre><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>下划线格式，变小驼峰格式</p><p>搜索栏：</p><pre><code>_([a-z]+)</code></pre><p>替换栏：</p><pre><code>\u$1</code></pre><h4 id="推荐一个jetbrains插件CamelCase-安装后使用快捷键SHIFT-ALT-U-可以切换CamelCase-camelCase-snake-case-SNAKE-CASE-四种风格。"><a href="#推荐一个jetbrains插件CamelCase-安装后使用快捷键SHIFT-ALT-U-可以切换CamelCase-camelCase-snake-case-SNAKE-CASE-四种风格。" class="headerlink" title="推荐一个jetbrains插件CamelCase, 安装后使用快捷键SHIFT + ALT + U 可以切换CamelCase, camelCase, snake_case, SNAKE_CASE 四种风格。"></a>推荐一个jetbrains插件CamelCase, 安装后使用快捷键SHIFT + ALT + U 可以切换CamelCase, camelCase, snake_case, SNAKE_CASE 四种风格。</h4><h2 id="多行搜索"><a href="#多行搜索" class="headerlink" title="多行搜索"></a>多行搜索</h2><p>最近查找BUG时搜索代码用到了多行搜索，顺便做个笔记。</p><h3 id="还是举个栗子"><a href="#还是举个栗子" class="headerlink" title="还是举个栗子"></a>还是举个栗子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package awesomeProject</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func main()  &#123;</span><br><span class="line">update :&#x3D; map[string]interface&#123;&#125;&#123;</span><br><span class="line">&quot;hello&quot;:&quot;world&quot;,</span><br><span class="line">&quot;name&quot;: &quot;tom&quot;,</span><br><span class="line">&quot;holy&quot;:&quot;shit&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update &#x3D; map[string]interface&#123;&#125;&#123;</span><br><span class="line">&quot;hello&quot;:&quot;world&quot;,</span><br><span class="line">&quot;holy&quot;:&quot;shit&quot;,</span><br><span class="line">&#125;</span><br><span class="line">update[&quot;name&quot;] &#x3D; &quot;marry&quot;</span><br><span class="line">fmt.Println(update)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>假如代码中定义了许多的名为updage的map现在要搜索update中有添加键为name的代码，正则表达式可以这样写</p><pre><code>(update.*=.*\&#123;[^&#125;]*?name[^&#125;]*?\&#125;)|(update\[&quot;name&quot;])</code></pre><p>要搜索出第一个update就需要使用多行搜索。[^}] 可以匹配除了 } 的所有字符，包括空格换行制表等等，然后使用} 进行结束匹配，避免匹配过多内容。搜索第二个update就简单多了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;jetBrains-IED关于正则搜索替换的高级用法。&quot;&gt;&lt;a href=&quot;#jetBrains-IED关于正则搜索替换的高级用法。&quot; class=&quot;headerlink&quot; title=&quot;jetBrains IED关于正则搜索替换的高级用法。&quot;&gt;&lt;/a&gt;jetBrains IED关于正则搜索替换的高级用法。&lt;/h1&gt;&lt;h2 id=&quot;使用正则表达式捕获分组和反向引用分组。&quot;&gt;&lt;a href=&quot;#使用正则表达式捕获分组和反向引用分组。&quot; class=&quot;headerlink&quot; title=&quot;使用正则表达式捕获分组和反向引用分组。&quot;&gt;&lt;/a&gt;使用正则表达式捕获分组和反向引用分组。&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
